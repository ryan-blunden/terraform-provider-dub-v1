// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FourHundredAndTwentyTwoCode - A short code indicating the error code returned.
type FourHundredAndTwentyTwoCode string

const (
	FourHundredAndTwentyTwoCodeUnprocessableEntity FourHundredAndTwentyTwoCode = "unprocessable_entity"
)

func (e FourHundredAndTwentyTwoCode) ToPointer() *FourHundredAndTwentyTwoCode {
	return &e
}
func (e *FourHundredAndTwentyTwoCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unprocessable_entity":
		*e = FourHundredAndTwentyTwoCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FourHundredAndTwentyTwoCode: %v", v)
	}
}

type FourHundredAndTwentyTwoError struct {
	// A short code indicating the error code returned.
	Code FourHundredAndTwentyTwoCode `json:"code"`
	// A human readable explanation of what went wrong.
	Message string `json:"message"`
	// A link to our documentation with more details about this error code
	DocURL *string `json:"doc_url,omitempty"`
}

func (o *FourHundredAndTwentyTwoError) GetCode() FourHundredAndTwentyTwoCode {
	if o == nil {
		return FourHundredAndTwentyTwoCode("")
	}
	return o.Code
}

func (o *FourHundredAndTwentyTwoError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *FourHundredAndTwentyTwoError) GetDocURL() *string {
	if o == nil {
		return nil
	}
	return o.DocURL
}

// FourHundredAndTwentyTwo - The request was well-formed but was unable to be followed due to semantic errors.
type FourHundredAndTwentyTwo struct {
	Error FourHundredAndTwentyTwoError `json:"error"`
}

func (o *FourHundredAndTwentyTwo) GetError() FourHundredAndTwentyTwoError {
	if o == nil {
		return FourHundredAndTwentyTwoError{}
	}
	return o.Error
}
