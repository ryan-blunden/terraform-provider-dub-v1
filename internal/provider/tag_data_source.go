// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &TagDataSource{}
var _ datasource.DataSourceWithConfigure = &TagDataSource{}

func NewTagDataSource() datasource.DataSource {
	return &TagDataSource{}
}

// TagDataSource is the data source implementation.
type TagDataSource struct {
	// Provider configured SDK client.
	client *sdk.Dub
}

// TagDataSourceModel describes the data model.
type TagDataSourceModel struct {
	ArrayOfStr []types.String `queryParam:"inline" tfsdk:"array_of_str" tfPlanOnly:"true"`
	Color      types.String   `tfsdk:"color"`
	ID         types.String   `tfsdk:"id"`
	Name       types.String   `tfsdk:"name"`
	Page       types.Float64  `queryParam:"style=form,explode=true,name=page" tfsdk:"page"`
	PageSize   types.Float64  `queryParam:"style=form,explode=true,name=pageSize" tfsdk:"page_size"`
	Search     types.String   `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	SortBy     types.String   `queryParam:"style=form,explode=true,name=sortBy" tfsdk:"sort_by"`
	SortOrder  types.String   `queryParam:"style=form,explode=true,name=sortOrder" tfsdk:"sort_order"`
	Str        types.String   `queryParam:"inline" tfsdk:"str" tfPlanOnly:"true"`
}

// Metadata returns the data source type name.
func (r *TagDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tag"
}

// Schema defines the schema for the data source.
func (r *TagDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Tag DataSource",

		Attributes: map[string]schema.Attribute{
			"array_of_str": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
			},
			"color": schema.StringAttribute{
				Computed:    true,
				Description: `The color of the tag.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique ID of the tag.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the tag.`,
			},
			"page": schema.Float64Attribute{
				Optional:    true,
				Description: `The page number for pagination.`,
			},
			"page_size": schema.Float64Attribute{
				Optional:    true,
				Description: `The number of items per page.`,
			},
			"search": schema.StringAttribute{
				Optional:    true,
				Description: `The search term to filter the tags by.`,
			},
			"sort_by": schema.StringAttribute{
				Optional:    true,
				Description: `The field to sort the tags by.`,
			},
			"sort_order": schema.StringAttribute{
				Optional:    true,
				Description: `The order to sort the tags by.`,
			},
			"str": schema.StringAttribute{
				Optional: true,
			},
		},
	}
}

func (r *TagDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Dub)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Dub, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TagDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *TagDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetTagsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Tags.GetTags(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.TagSchemas != nil && len(res.TagSchemas) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedTagSchema(ctx, &res.TagSchemas[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
