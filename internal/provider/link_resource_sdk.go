// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/ryan-blunden/terraform-provider-dub/internal/provider/types"
	"github.com/ryan-blunden/terraform-provider-dub/internal/sdk/models/operations"
	"github.com/ryan-blunden/terraform-provider-dub/internal/sdk/models/shared"
)

func (r *LinkResourceModel) ToOperationsCreateLinkRequest(ctx context.Context) (*operations.CreateLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var url string
	url = r.URL.ValueString()

	domain := new(string)
	if !r.Domain.IsUnknown() && !r.Domain.IsNull() {
		*domain = r.Domain.ValueString()
	} else {
		domain = nil
	}
	key := new(string)
	if !r.Key.IsUnknown() && !r.Key.IsNull() {
		*key = r.Key.ValueString()
	} else {
		key = nil
	}
	keyLength := new(float64)
	if !r.KeyLength.IsUnknown() && !r.KeyLength.IsNull() {
		*keyLength = r.KeyLength.ValueFloat64()
	} else {
		keyLength = nil
	}
	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	tenantID := new(string)
	if !r.TenantID.IsUnknown() && !r.TenantID.IsNull() {
		*tenantID = r.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	programID := new(string)
	if !r.ProgramID.IsUnknown() && !r.ProgramID.IsNull() {
		*programID = r.ProgramID.ValueString()
	} else {
		programID = nil
	}
	partnerID := new(string)
	if !r.PartnerID.IsUnknown() && !r.PartnerID.IsNull() {
		*partnerID = r.PartnerID.ValueString()
	} else {
		partnerID = nil
	}
	prefix := new(string)
	if !r.Prefix.IsUnknown() && !r.Prefix.IsNull() {
		*prefix = r.Prefix.ValueString()
	} else {
		prefix = nil
	}
	trackConversion := new(bool)
	if !r.TrackConversion.IsUnknown() && !r.TrackConversion.IsNull() {
		*trackConversion = r.TrackConversion.ValueBool()
	} else {
		trackConversion = nil
	}
	archived := new(bool)
	if !r.Archived.IsUnknown() && !r.Archived.IsNull() {
		*archived = r.Archived.ValueBool()
	} else {
		archived = nil
	}
	publicStats := new(bool)
	if !r.PublicStats.IsUnknown() && !r.PublicStats.IsNull() {
		*publicStats = r.PublicStats.ValueBool()
	} else {
		publicStats = nil
	}
	tagID := new(string)
	if !r.TagID.IsUnknown() && !r.TagID.IsNull() {
		*tagID = r.TagID.ValueString()
	} else {
		tagID = nil
	}
	var tagIds *operations.CreateLinkTagIds
	if r.TagIds != nil {
		str := new(string)
		if !r.TagIds.Str.IsUnknown() && !r.TagIds.Str.IsNull() {
			*str = r.TagIds.Str.ValueString()
		} else {
			str = nil
		}
		if str != nil {
			tagIds = &operations.CreateLinkTagIds{
				Str: str,
			}
		}
		var arrayOfStr []string
		if r.TagIds.ArrayOfStr != nil {
			arrayOfStr = make([]string, 0, len(r.TagIds.ArrayOfStr))
			for _, arrayOfStrItem := range r.TagIds.ArrayOfStr {
				arrayOfStr = append(arrayOfStr, arrayOfStrItem.ValueString())
			}
		}
		if arrayOfStr != nil {
			tagIds = &operations.CreateLinkTagIds{
				ArrayOfStr: arrayOfStr,
			}
		}
	}
	var tagNames *operations.CreateLinkTagNames
	if r.TagNames != nil {
		str1 := new(string)
		if !r.TagNames.Str.IsUnknown() && !r.TagNames.Str.IsNull() {
			*str1 = r.TagNames.Str.ValueString()
		} else {
			str1 = nil
		}
		if str1 != nil {
			tagNames = &operations.CreateLinkTagNames{
				Str: str1,
			}
		}
		var arrayOfStr1 []string
		if r.TagNames.ArrayOfStr != nil {
			arrayOfStr1 = make([]string, 0, len(r.TagNames.ArrayOfStr))
			for _, arrayOfStrItem1 := range r.TagNames.ArrayOfStr {
				arrayOfStr1 = append(arrayOfStr1, arrayOfStrItem1.ValueString())
			}
		}
		if arrayOfStr1 != nil {
			tagNames = &operations.CreateLinkTagNames{
				ArrayOfStr: arrayOfStr1,
			}
		}
	}
	folderID := new(string)
	if !r.FolderID.IsUnknown() && !r.FolderID.IsNull() {
		*folderID = r.FolderID.ValueString()
	} else {
		folderID = nil
	}
	comments := new(string)
	if !r.Comments.IsUnknown() && !r.Comments.IsNull() {
		*comments = r.Comments.ValueString()
	} else {
		comments = nil
	}
	expiresAt := new(string)
	if !r.ExpiresAt.IsUnknown() && !r.ExpiresAt.IsNull() {
		*expiresAt = r.ExpiresAt.ValueString()
	} else {
		expiresAt = nil
	}
	expiredURL := new(string)
	if !r.ExpiredURL.IsUnknown() && !r.ExpiredURL.IsNull() {
		*expiredURL = r.ExpiredURL.ValueString()
	} else {
		expiredURL = nil
	}
	password := new(string)
	if !r.Password.IsUnknown() && !r.Password.IsNull() {
		*password = r.Password.ValueString()
	} else {
		password = nil
	}
	proxy := new(bool)
	if !r.Proxy.IsUnknown() && !r.Proxy.IsNull() {
		*proxy = r.Proxy.ValueBool()
	} else {
		proxy = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	image := new(string)
	if !r.Image.IsUnknown() && !r.Image.IsNull() {
		*image = r.Image.ValueString()
	} else {
		image = nil
	}
	video := new(string)
	if !r.Video.IsUnknown() && !r.Video.IsNull() {
		*video = r.Video.ValueString()
	} else {
		video = nil
	}
	rewrite := new(bool)
	if !r.Rewrite.IsUnknown() && !r.Rewrite.IsNull() {
		*rewrite = r.Rewrite.ValueBool()
	} else {
		rewrite = nil
	}
	ios := new(string)
	if !r.Ios.IsUnknown() && !r.Ios.IsNull() {
		*ios = r.Ios.ValueString()
	} else {
		ios = nil
	}
	android := new(string)
	if !r.Android.IsUnknown() && !r.Android.IsNull() {
		*android = r.Android.ValueString()
	} else {
		android = nil
	}
	var geo *shared.LinkGeoTargeting
	if r.Geo != nil {
		af := new(string)
		if !r.Geo.Af.IsUnknown() && !r.Geo.Af.IsNull() {
			*af = r.Geo.Af.ValueString()
		} else {
			af = nil
		}
		al := new(string)
		if !r.Geo.Al.IsUnknown() && !r.Geo.Al.IsNull() {
			*al = r.Geo.Al.ValueString()
		} else {
			al = nil
		}
		dz := new(string)
		if !r.Geo.Dz.IsUnknown() && !r.Geo.Dz.IsNull() {
			*dz = r.Geo.Dz.ValueString()
		} else {
			dz = nil
		}
		as := new(string)
		if !r.Geo.As.IsUnknown() && !r.Geo.As.IsNull() {
			*as = r.Geo.As.ValueString()
		} else {
			as = nil
		}
		ad := new(string)
		if !r.Geo.Ad.IsUnknown() && !r.Geo.Ad.IsNull() {
			*ad = r.Geo.Ad.ValueString()
		} else {
			ad = nil
		}
		ao := new(string)
		if !r.Geo.Ao.IsUnknown() && !r.Geo.Ao.IsNull() {
			*ao = r.Geo.Ao.ValueString()
		} else {
			ao = nil
		}
		ai := new(string)
		if !r.Geo.Ai.IsUnknown() && !r.Geo.Ai.IsNull() {
			*ai = r.Geo.Ai.ValueString()
		} else {
			ai = nil
		}
		aq := new(string)
		if !r.Geo.Aq.IsUnknown() && !r.Geo.Aq.IsNull() {
			*aq = r.Geo.Aq.ValueString()
		} else {
			aq = nil
		}
		ag := new(string)
		if !r.Geo.Ag.IsUnknown() && !r.Geo.Ag.IsNull() {
			*ag = r.Geo.Ag.ValueString()
		} else {
			ag = nil
		}
		ar := new(string)
		if !r.Geo.Ar.IsUnknown() && !r.Geo.Ar.IsNull() {
			*ar = r.Geo.Ar.ValueString()
		} else {
			ar = nil
		}
		am := new(string)
		if !r.Geo.Am.IsUnknown() && !r.Geo.Am.IsNull() {
			*am = r.Geo.Am.ValueString()
		} else {
			am = nil
		}
		aw := new(string)
		if !r.Geo.Aw.IsUnknown() && !r.Geo.Aw.IsNull() {
			*aw = r.Geo.Aw.ValueString()
		} else {
			aw = nil
		}
		au := new(string)
		if !r.Geo.Au.IsUnknown() && !r.Geo.Au.IsNull() {
			*au = r.Geo.Au.ValueString()
		} else {
			au = nil
		}
		at := new(string)
		if !r.Geo.At.IsUnknown() && !r.Geo.At.IsNull() {
			*at = r.Geo.At.ValueString()
		} else {
			at = nil
		}
		az := new(string)
		if !r.Geo.Az.IsUnknown() && !r.Geo.Az.IsNull() {
			*az = r.Geo.Az.ValueString()
		} else {
			az = nil
		}
		bs := new(string)
		if !r.Geo.Bs.IsUnknown() && !r.Geo.Bs.IsNull() {
			*bs = r.Geo.Bs.ValueString()
		} else {
			bs = nil
		}
		bh := new(string)
		if !r.Geo.Bh.IsUnknown() && !r.Geo.Bh.IsNull() {
			*bh = r.Geo.Bh.ValueString()
		} else {
			bh = nil
		}
		bd := new(string)
		if !r.Geo.Bd.IsUnknown() && !r.Geo.Bd.IsNull() {
			*bd = r.Geo.Bd.ValueString()
		} else {
			bd = nil
		}
		bb := new(string)
		if !r.Geo.Bb.IsUnknown() && !r.Geo.Bb.IsNull() {
			*bb = r.Geo.Bb.ValueString()
		} else {
			bb = nil
		}
		by := new(string)
		if !r.Geo.By.IsUnknown() && !r.Geo.By.IsNull() {
			*by = r.Geo.By.ValueString()
		} else {
			by = nil
		}
		be := new(string)
		if !r.Geo.Be.IsUnknown() && !r.Geo.Be.IsNull() {
			*be = r.Geo.Be.ValueString()
		} else {
			be = nil
		}
		bz := new(string)
		if !r.Geo.Bz.IsUnknown() && !r.Geo.Bz.IsNull() {
			*bz = r.Geo.Bz.ValueString()
		} else {
			bz = nil
		}
		bj := new(string)
		if !r.Geo.Bj.IsUnknown() && !r.Geo.Bj.IsNull() {
			*bj = r.Geo.Bj.ValueString()
		} else {
			bj = nil
		}
		bm := new(string)
		if !r.Geo.Bm.IsUnknown() && !r.Geo.Bm.IsNull() {
			*bm = r.Geo.Bm.ValueString()
		} else {
			bm = nil
		}
		bt := new(string)
		if !r.Geo.Bt.IsUnknown() && !r.Geo.Bt.IsNull() {
			*bt = r.Geo.Bt.ValueString()
		} else {
			bt = nil
		}
		bo := new(string)
		if !r.Geo.Bo.IsUnknown() && !r.Geo.Bo.IsNull() {
			*bo = r.Geo.Bo.ValueString()
		} else {
			bo = nil
		}
		ba := new(string)
		if !r.Geo.Ba.IsUnknown() && !r.Geo.Ba.IsNull() {
			*ba = r.Geo.Ba.ValueString()
		} else {
			ba = nil
		}
		bw := new(string)
		if !r.Geo.Bw.IsUnknown() && !r.Geo.Bw.IsNull() {
			*bw = r.Geo.Bw.ValueString()
		} else {
			bw = nil
		}
		bv := new(string)
		if !r.Geo.Bv.IsUnknown() && !r.Geo.Bv.IsNull() {
			*bv = r.Geo.Bv.ValueString()
		} else {
			bv = nil
		}
		br := new(string)
		if !r.Geo.Br.IsUnknown() && !r.Geo.Br.IsNull() {
			*br = r.Geo.Br.ValueString()
		} else {
			br = nil
		}
		io := new(string)
		if !r.Geo.Io.IsUnknown() && !r.Geo.Io.IsNull() {
			*io = r.Geo.Io.ValueString()
		} else {
			io = nil
		}
		bn := new(string)
		if !r.Geo.Bn.IsUnknown() && !r.Geo.Bn.IsNull() {
			*bn = r.Geo.Bn.ValueString()
		} else {
			bn = nil
		}
		bg := new(string)
		if !r.Geo.Bg.IsUnknown() && !r.Geo.Bg.IsNull() {
			*bg = r.Geo.Bg.ValueString()
		} else {
			bg = nil
		}
		bf := new(string)
		if !r.Geo.Bf.IsUnknown() && !r.Geo.Bf.IsNull() {
			*bf = r.Geo.Bf.ValueString()
		} else {
			bf = nil
		}
		bi := new(string)
		if !r.Geo.Bi.IsUnknown() && !r.Geo.Bi.IsNull() {
			*bi = r.Geo.Bi.ValueString()
		} else {
			bi = nil
		}
		kh := new(string)
		if !r.Geo.Kh.IsUnknown() && !r.Geo.Kh.IsNull() {
			*kh = r.Geo.Kh.ValueString()
		} else {
			kh = nil
		}
		cm := new(string)
		if !r.Geo.Cm.IsUnknown() && !r.Geo.Cm.IsNull() {
			*cm = r.Geo.Cm.ValueString()
		} else {
			cm = nil
		}
		ca := new(string)
		if !r.Geo.Ca.IsUnknown() && !r.Geo.Ca.IsNull() {
			*ca = r.Geo.Ca.ValueString()
		} else {
			ca = nil
		}
		cv := new(string)
		if !r.Geo.Cv.IsUnknown() && !r.Geo.Cv.IsNull() {
			*cv = r.Geo.Cv.ValueString()
		} else {
			cv = nil
		}
		ky := new(string)
		if !r.Geo.Ky.IsUnknown() && !r.Geo.Ky.IsNull() {
			*ky = r.Geo.Ky.ValueString()
		} else {
			ky = nil
		}
		cf := new(string)
		if !r.Geo.Cf.IsUnknown() && !r.Geo.Cf.IsNull() {
			*cf = r.Geo.Cf.ValueString()
		} else {
			cf = nil
		}
		td := new(string)
		if !r.Geo.Td.IsUnknown() && !r.Geo.Td.IsNull() {
			*td = r.Geo.Td.ValueString()
		} else {
			td = nil
		}
		cl := new(string)
		if !r.Geo.Cl.IsUnknown() && !r.Geo.Cl.IsNull() {
			*cl = r.Geo.Cl.ValueString()
		} else {
			cl = nil
		}
		cn := new(string)
		if !r.Geo.Cn.IsUnknown() && !r.Geo.Cn.IsNull() {
			*cn = r.Geo.Cn.ValueString()
		} else {
			cn = nil
		}
		cx := new(string)
		if !r.Geo.Cx.IsUnknown() && !r.Geo.Cx.IsNull() {
			*cx = r.Geo.Cx.ValueString()
		} else {
			cx = nil
		}
		cc := new(string)
		if !r.Geo.Cc.IsUnknown() && !r.Geo.Cc.IsNull() {
			*cc = r.Geo.Cc.ValueString()
		} else {
			cc = nil
		}
		co := new(string)
		if !r.Geo.Co.IsUnknown() && !r.Geo.Co.IsNull() {
			*co = r.Geo.Co.ValueString()
		} else {
			co = nil
		}
		km := new(string)
		if !r.Geo.Km.IsUnknown() && !r.Geo.Km.IsNull() {
			*km = r.Geo.Km.ValueString()
		} else {
			km = nil
		}
		cg := new(string)
		if !r.Geo.Cg.IsUnknown() && !r.Geo.Cg.IsNull() {
			*cg = r.Geo.Cg.ValueString()
		} else {
			cg = nil
		}
		cd := new(string)
		if !r.Geo.Cd.IsUnknown() && !r.Geo.Cd.IsNull() {
			*cd = r.Geo.Cd.ValueString()
		} else {
			cd = nil
		}
		ck := new(string)
		if !r.Geo.Ck.IsUnknown() && !r.Geo.Ck.IsNull() {
			*ck = r.Geo.Ck.ValueString()
		} else {
			ck = nil
		}
		cr := new(string)
		if !r.Geo.Cr.IsUnknown() && !r.Geo.Cr.IsNull() {
			*cr = r.Geo.Cr.ValueString()
		} else {
			cr = nil
		}
		ci := new(string)
		if !r.Geo.Ci.IsUnknown() && !r.Geo.Ci.IsNull() {
			*ci = r.Geo.Ci.ValueString()
		} else {
			ci = nil
		}
		hr := new(string)
		if !r.Geo.Hr.IsUnknown() && !r.Geo.Hr.IsNull() {
			*hr = r.Geo.Hr.ValueString()
		} else {
			hr = nil
		}
		cu := new(string)
		if !r.Geo.Cu.IsUnknown() && !r.Geo.Cu.IsNull() {
			*cu = r.Geo.Cu.ValueString()
		} else {
			cu = nil
		}
		cy := new(string)
		if !r.Geo.Cy.IsUnknown() && !r.Geo.Cy.IsNull() {
			*cy = r.Geo.Cy.ValueString()
		} else {
			cy = nil
		}
		cz := new(string)
		if !r.Geo.Cz.IsUnknown() && !r.Geo.Cz.IsNull() {
			*cz = r.Geo.Cz.ValueString()
		} else {
			cz = nil
		}
		dk := new(string)
		if !r.Geo.Dk.IsUnknown() && !r.Geo.Dk.IsNull() {
			*dk = r.Geo.Dk.ValueString()
		} else {
			dk = nil
		}
		dj := new(string)
		if !r.Geo.Dj.IsUnknown() && !r.Geo.Dj.IsNull() {
			*dj = r.Geo.Dj.ValueString()
		} else {
			dj = nil
		}
		dm := new(string)
		if !r.Geo.Dm.IsUnknown() && !r.Geo.Dm.IsNull() {
			*dm = r.Geo.Dm.ValueString()
		} else {
			dm = nil
		}
		do := new(string)
		if !r.Geo.Do.IsUnknown() && !r.Geo.Do.IsNull() {
			*do = r.Geo.Do.ValueString()
		} else {
			do = nil
		}
		ec := new(string)
		if !r.Geo.Ec.IsUnknown() && !r.Geo.Ec.IsNull() {
			*ec = r.Geo.Ec.ValueString()
		} else {
			ec = nil
		}
		eg := new(string)
		if !r.Geo.Eg.IsUnknown() && !r.Geo.Eg.IsNull() {
			*eg = r.Geo.Eg.ValueString()
		} else {
			eg = nil
		}
		sv := new(string)
		if !r.Geo.Sv.IsUnknown() && !r.Geo.Sv.IsNull() {
			*sv = r.Geo.Sv.ValueString()
		} else {
			sv = nil
		}
		gq := new(string)
		if !r.Geo.Gq.IsUnknown() && !r.Geo.Gq.IsNull() {
			*gq = r.Geo.Gq.ValueString()
		} else {
			gq = nil
		}
		er := new(string)
		if !r.Geo.Er.IsUnknown() && !r.Geo.Er.IsNull() {
			*er = r.Geo.Er.ValueString()
		} else {
			er = nil
		}
		ee := new(string)
		if !r.Geo.Ee.IsUnknown() && !r.Geo.Ee.IsNull() {
			*ee = r.Geo.Ee.ValueString()
		} else {
			ee = nil
		}
		et := new(string)
		if !r.Geo.Et.IsUnknown() && !r.Geo.Et.IsNull() {
			*et = r.Geo.Et.ValueString()
		} else {
			et = nil
		}
		fk := new(string)
		if !r.Geo.Fk.IsUnknown() && !r.Geo.Fk.IsNull() {
			*fk = r.Geo.Fk.ValueString()
		} else {
			fk = nil
		}
		fo := new(string)
		if !r.Geo.Fo.IsUnknown() && !r.Geo.Fo.IsNull() {
			*fo = r.Geo.Fo.ValueString()
		} else {
			fo = nil
		}
		fj := new(string)
		if !r.Geo.Fj.IsUnknown() && !r.Geo.Fj.IsNull() {
			*fj = r.Geo.Fj.ValueString()
		} else {
			fj = nil
		}
		fi := new(string)
		if !r.Geo.Fi.IsUnknown() && !r.Geo.Fi.IsNull() {
			*fi = r.Geo.Fi.ValueString()
		} else {
			fi = nil
		}
		fr := new(string)
		if !r.Geo.Fr.IsUnknown() && !r.Geo.Fr.IsNull() {
			*fr = r.Geo.Fr.ValueString()
		} else {
			fr = nil
		}
		gf := new(string)
		if !r.Geo.Gf.IsUnknown() && !r.Geo.Gf.IsNull() {
			*gf = r.Geo.Gf.ValueString()
		} else {
			gf = nil
		}
		pf := new(string)
		if !r.Geo.Pf.IsUnknown() && !r.Geo.Pf.IsNull() {
			*pf = r.Geo.Pf.ValueString()
		} else {
			pf = nil
		}
		tf := new(string)
		if !r.Geo.Tf.IsUnknown() && !r.Geo.Tf.IsNull() {
			*tf = r.Geo.Tf.ValueString()
		} else {
			tf = nil
		}
		ga := new(string)
		if !r.Geo.Ga.IsUnknown() && !r.Geo.Ga.IsNull() {
			*ga = r.Geo.Ga.ValueString()
		} else {
			ga = nil
		}
		gm := new(string)
		if !r.Geo.Gm.IsUnknown() && !r.Geo.Gm.IsNull() {
			*gm = r.Geo.Gm.ValueString()
		} else {
			gm = nil
		}
		ge := new(string)
		if !r.Geo.Ge.IsUnknown() && !r.Geo.Ge.IsNull() {
			*ge = r.Geo.Ge.ValueString()
		} else {
			ge = nil
		}
		de := new(string)
		if !r.Geo.De.IsUnknown() && !r.Geo.De.IsNull() {
			*de = r.Geo.De.ValueString()
		} else {
			de = nil
		}
		gh := new(string)
		if !r.Geo.Gh.IsUnknown() && !r.Geo.Gh.IsNull() {
			*gh = r.Geo.Gh.ValueString()
		} else {
			gh = nil
		}
		gi := new(string)
		if !r.Geo.Gi.IsUnknown() && !r.Geo.Gi.IsNull() {
			*gi = r.Geo.Gi.ValueString()
		} else {
			gi = nil
		}
		gr := new(string)
		if !r.Geo.Gr.IsUnknown() && !r.Geo.Gr.IsNull() {
			*gr = r.Geo.Gr.ValueString()
		} else {
			gr = nil
		}
		gl := new(string)
		if !r.Geo.Gl.IsUnknown() && !r.Geo.Gl.IsNull() {
			*gl = r.Geo.Gl.ValueString()
		} else {
			gl = nil
		}
		gd := new(string)
		if !r.Geo.Gd.IsUnknown() && !r.Geo.Gd.IsNull() {
			*gd = r.Geo.Gd.ValueString()
		} else {
			gd = nil
		}
		gp := new(string)
		if !r.Geo.Gp.IsUnknown() && !r.Geo.Gp.IsNull() {
			*gp = r.Geo.Gp.ValueString()
		} else {
			gp = nil
		}
		gu := new(string)
		if !r.Geo.Gu.IsUnknown() && !r.Geo.Gu.IsNull() {
			*gu = r.Geo.Gu.ValueString()
		} else {
			gu = nil
		}
		gt := new(string)
		if !r.Geo.Gt.IsUnknown() && !r.Geo.Gt.IsNull() {
			*gt = r.Geo.Gt.ValueString()
		} else {
			gt = nil
		}
		gn := new(string)
		if !r.Geo.Gn.IsUnknown() && !r.Geo.Gn.IsNull() {
			*gn = r.Geo.Gn.ValueString()
		} else {
			gn = nil
		}
		gw := new(string)
		if !r.Geo.Gw.IsUnknown() && !r.Geo.Gw.IsNull() {
			*gw = r.Geo.Gw.ValueString()
		} else {
			gw = nil
		}
		gy := new(string)
		if !r.Geo.Gy.IsUnknown() && !r.Geo.Gy.IsNull() {
			*gy = r.Geo.Gy.ValueString()
		} else {
			gy = nil
		}
		ht := new(string)
		if !r.Geo.Ht.IsUnknown() && !r.Geo.Ht.IsNull() {
			*ht = r.Geo.Ht.ValueString()
		} else {
			ht = nil
		}
		hm := new(string)
		if !r.Geo.Hm.IsUnknown() && !r.Geo.Hm.IsNull() {
			*hm = r.Geo.Hm.ValueString()
		} else {
			hm = nil
		}
		va := new(string)
		if !r.Geo.Va.IsUnknown() && !r.Geo.Va.IsNull() {
			*va = r.Geo.Va.ValueString()
		} else {
			va = nil
		}
		hn := new(string)
		if !r.Geo.Hn.IsUnknown() && !r.Geo.Hn.IsNull() {
			*hn = r.Geo.Hn.ValueString()
		} else {
			hn = nil
		}
		hk := new(string)
		if !r.Geo.Hk.IsUnknown() && !r.Geo.Hk.IsNull() {
			*hk = r.Geo.Hk.ValueString()
		} else {
			hk = nil
		}
		hu := new(string)
		if !r.Geo.Hu.IsUnknown() && !r.Geo.Hu.IsNull() {
			*hu = r.Geo.Hu.ValueString()
		} else {
			hu = nil
		}
		is := new(string)
		if !r.Geo.Is.IsUnknown() && !r.Geo.Is.IsNull() {
			*is = r.Geo.Is.ValueString()
		} else {
			is = nil
		}
		in := new(string)
		if !r.Geo.In.IsUnknown() && !r.Geo.In.IsNull() {
			*in = r.Geo.In.ValueString()
		} else {
			in = nil
		}
		id := new(string)
		if !r.Geo.ID.IsUnknown() && !r.Geo.ID.IsNull() {
			*id = r.Geo.ID.ValueString()
		} else {
			id = nil
		}
		ir := new(string)
		if !r.Geo.Ir.IsUnknown() && !r.Geo.Ir.IsNull() {
			*ir = r.Geo.Ir.ValueString()
		} else {
			ir = nil
		}
		iq := new(string)
		if !r.Geo.Iq.IsUnknown() && !r.Geo.Iq.IsNull() {
			*iq = r.Geo.Iq.ValueString()
		} else {
			iq = nil
		}
		ie := new(string)
		if !r.Geo.Ie.IsUnknown() && !r.Geo.Ie.IsNull() {
			*ie = r.Geo.Ie.ValueString()
		} else {
			ie = nil
		}
		il := new(string)
		if !r.Geo.Il.IsUnknown() && !r.Geo.Il.IsNull() {
			*il = r.Geo.Il.ValueString()
		} else {
			il = nil
		}
		it := new(string)
		if !r.Geo.It.IsUnknown() && !r.Geo.It.IsNull() {
			*it = r.Geo.It.ValueString()
		} else {
			it = nil
		}
		jm := new(string)
		if !r.Geo.Jm.IsUnknown() && !r.Geo.Jm.IsNull() {
			*jm = r.Geo.Jm.ValueString()
		} else {
			jm = nil
		}
		jp := new(string)
		if !r.Geo.Jp.IsUnknown() && !r.Geo.Jp.IsNull() {
			*jp = r.Geo.Jp.ValueString()
		} else {
			jp = nil
		}
		jo := new(string)
		if !r.Geo.Jo.IsUnknown() && !r.Geo.Jo.IsNull() {
			*jo = r.Geo.Jo.ValueString()
		} else {
			jo = nil
		}
		kz := new(string)
		if !r.Geo.Kz.IsUnknown() && !r.Geo.Kz.IsNull() {
			*kz = r.Geo.Kz.ValueString()
		} else {
			kz = nil
		}
		ke := new(string)
		if !r.Geo.Ke.IsUnknown() && !r.Geo.Ke.IsNull() {
			*ke = r.Geo.Ke.ValueString()
		} else {
			ke = nil
		}
		ki := new(string)
		if !r.Geo.Ki.IsUnknown() && !r.Geo.Ki.IsNull() {
			*ki = r.Geo.Ki.ValueString()
		} else {
			ki = nil
		}
		kp := new(string)
		if !r.Geo.Kp.IsUnknown() && !r.Geo.Kp.IsNull() {
			*kp = r.Geo.Kp.ValueString()
		} else {
			kp = nil
		}
		kr := new(string)
		if !r.Geo.Kr.IsUnknown() && !r.Geo.Kr.IsNull() {
			*kr = r.Geo.Kr.ValueString()
		} else {
			kr = nil
		}
		kw := new(string)
		if !r.Geo.Kw.IsUnknown() && !r.Geo.Kw.IsNull() {
			*kw = r.Geo.Kw.ValueString()
		} else {
			kw = nil
		}
		kg := new(string)
		if !r.Geo.Kg.IsUnknown() && !r.Geo.Kg.IsNull() {
			*kg = r.Geo.Kg.ValueString()
		} else {
			kg = nil
		}
		la := new(string)
		if !r.Geo.La.IsUnknown() && !r.Geo.La.IsNull() {
			*la = r.Geo.La.ValueString()
		} else {
			la = nil
		}
		lv := new(string)
		if !r.Geo.Lv.IsUnknown() && !r.Geo.Lv.IsNull() {
			*lv = r.Geo.Lv.ValueString()
		} else {
			lv = nil
		}
		lb := new(string)
		if !r.Geo.Lb.IsUnknown() && !r.Geo.Lb.IsNull() {
			*lb = r.Geo.Lb.ValueString()
		} else {
			lb = nil
		}
		ls := new(string)
		if !r.Geo.Ls.IsUnknown() && !r.Geo.Ls.IsNull() {
			*ls = r.Geo.Ls.ValueString()
		} else {
			ls = nil
		}
		lr := new(string)
		if !r.Geo.Lr.IsUnknown() && !r.Geo.Lr.IsNull() {
			*lr = r.Geo.Lr.ValueString()
		} else {
			lr = nil
		}
		ly := new(string)
		if !r.Geo.Ly.IsUnknown() && !r.Geo.Ly.IsNull() {
			*ly = r.Geo.Ly.ValueString()
		} else {
			ly = nil
		}
		li := new(string)
		if !r.Geo.Li.IsUnknown() && !r.Geo.Li.IsNull() {
			*li = r.Geo.Li.ValueString()
		} else {
			li = nil
		}
		lt := new(string)
		if !r.Geo.Lt.IsUnknown() && !r.Geo.Lt.IsNull() {
			*lt = r.Geo.Lt.ValueString()
		} else {
			lt = nil
		}
		lu := new(string)
		if !r.Geo.Lu.IsUnknown() && !r.Geo.Lu.IsNull() {
			*lu = r.Geo.Lu.ValueString()
		} else {
			lu = nil
		}
		mo := new(string)
		if !r.Geo.Mo.IsUnknown() && !r.Geo.Mo.IsNull() {
			*mo = r.Geo.Mo.ValueString()
		} else {
			mo = nil
		}
		mg := new(string)
		if !r.Geo.Mg.IsUnknown() && !r.Geo.Mg.IsNull() {
			*mg = r.Geo.Mg.ValueString()
		} else {
			mg = nil
		}
		mw := new(string)
		if !r.Geo.Mw.IsUnknown() && !r.Geo.Mw.IsNull() {
			*mw = r.Geo.Mw.ValueString()
		} else {
			mw = nil
		}
		my := new(string)
		if !r.Geo.My.IsUnknown() && !r.Geo.My.IsNull() {
			*my = r.Geo.My.ValueString()
		} else {
			my = nil
		}
		mv := new(string)
		if !r.Geo.Mv.IsUnknown() && !r.Geo.Mv.IsNull() {
			*mv = r.Geo.Mv.ValueString()
		} else {
			mv = nil
		}
		ml := new(string)
		if !r.Geo.Ml.IsUnknown() && !r.Geo.Ml.IsNull() {
			*ml = r.Geo.Ml.ValueString()
		} else {
			ml = nil
		}
		mt := new(string)
		if !r.Geo.Mt.IsUnknown() && !r.Geo.Mt.IsNull() {
			*mt = r.Geo.Mt.ValueString()
		} else {
			mt = nil
		}
		mh := new(string)
		if !r.Geo.Mh.IsUnknown() && !r.Geo.Mh.IsNull() {
			*mh = r.Geo.Mh.ValueString()
		} else {
			mh = nil
		}
		mq := new(string)
		if !r.Geo.Mq.IsUnknown() && !r.Geo.Mq.IsNull() {
			*mq = r.Geo.Mq.ValueString()
		} else {
			mq = nil
		}
		mr := new(string)
		if !r.Geo.Mr.IsUnknown() && !r.Geo.Mr.IsNull() {
			*mr = r.Geo.Mr.ValueString()
		} else {
			mr = nil
		}
		mu := new(string)
		if !r.Geo.Mu.IsUnknown() && !r.Geo.Mu.IsNull() {
			*mu = r.Geo.Mu.ValueString()
		} else {
			mu = nil
		}
		yt := new(string)
		if !r.Geo.Yt.IsUnknown() && !r.Geo.Yt.IsNull() {
			*yt = r.Geo.Yt.ValueString()
		} else {
			yt = nil
		}
		mx := new(string)
		if !r.Geo.Mx.IsUnknown() && !r.Geo.Mx.IsNull() {
			*mx = r.Geo.Mx.ValueString()
		} else {
			mx = nil
		}
		fm := new(string)
		if !r.Geo.Fm.IsUnknown() && !r.Geo.Fm.IsNull() {
			*fm = r.Geo.Fm.ValueString()
		} else {
			fm = nil
		}
		md := new(string)
		if !r.Geo.Md.IsUnknown() && !r.Geo.Md.IsNull() {
			*md = r.Geo.Md.ValueString()
		} else {
			md = nil
		}
		mc := new(string)
		if !r.Geo.Mc.IsUnknown() && !r.Geo.Mc.IsNull() {
			*mc = r.Geo.Mc.ValueString()
		} else {
			mc = nil
		}
		mn := new(string)
		if !r.Geo.Mn.IsUnknown() && !r.Geo.Mn.IsNull() {
			*mn = r.Geo.Mn.ValueString()
		} else {
			mn = nil
		}
		ms := new(string)
		if !r.Geo.Ms.IsUnknown() && !r.Geo.Ms.IsNull() {
			*ms = r.Geo.Ms.ValueString()
		} else {
			ms = nil
		}
		ma := new(string)
		if !r.Geo.Ma.IsUnknown() && !r.Geo.Ma.IsNull() {
			*ma = r.Geo.Ma.ValueString()
		} else {
			ma = nil
		}
		mz := new(string)
		if !r.Geo.Mz.IsUnknown() && !r.Geo.Mz.IsNull() {
			*mz = r.Geo.Mz.ValueString()
		} else {
			mz = nil
		}
		mm := new(string)
		if !r.Geo.Mm.IsUnknown() && !r.Geo.Mm.IsNull() {
			*mm = r.Geo.Mm.ValueString()
		} else {
			mm = nil
		}
		na := new(string)
		if !r.Geo.Na.IsUnknown() && !r.Geo.Na.IsNull() {
			*na = r.Geo.Na.ValueString()
		} else {
			na = nil
		}
		nr := new(string)
		if !r.Geo.Nr.IsUnknown() && !r.Geo.Nr.IsNull() {
			*nr = r.Geo.Nr.ValueString()
		} else {
			nr = nil
		}
		np := new(string)
		if !r.Geo.Np.IsUnknown() && !r.Geo.Np.IsNull() {
			*np = r.Geo.Np.ValueString()
		} else {
			np = nil
		}
		nl := new(string)
		if !r.Geo.Nl.IsUnknown() && !r.Geo.Nl.IsNull() {
			*nl = r.Geo.Nl.ValueString()
		} else {
			nl = nil
		}
		nc := new(string)
		if !r.Geo.Nc.IsUnknown() && !r.Geo.Nc.IsNull() {
			*nc = r.Geo.Nc.ValueString()
		} else {
			nc = nil
		}
		nz := new(string)
		if !r.Geo.Nz.IsUnknown() && !r.Geo.Nz.IsNull() {
			*nz = r.Geo.Nz.ValueString()
		} else {
			nz = nil
		}
		ni := new(string)
		if !r.Geo.Ni.IsUnknown() && !r.Geo.Ni.IsNull() {
			*ni = r.Geo.Ni.ValueString()
		} else {
			ni = nil
		}
		ne := new(string)
		if !r.Geo.Ne.IsUnknown() && !r.Geo.Ne.IsNull() {
			*ne = r.Geo.Ne.ValueString()
		} else {
			ne = nil
		}
		ng := new(string)
		if !r.Geo.Ng.IsUnknown() && !r.Geo.Ng.IsNull() {
			*ng = r.Geo.Ng.ValueString()
		} else {
			ng = nil
		}
		nu := new(string)
		if !r.Geo.Nu.IsUnknown() && !r.Geo.Nu.IsNull() {
			*nu = r.Geo.Nu.ValueString()
		} else {
			nu = nil
		}
		nf := new(string)
		if !r.Geo.Nf.IsUnknown() && !r.Geo.Nf.IsNull() {
			*nf = r.Geo.Nf.ValueString()
		} else {
			nf = nil
		}
		mk := new(string)
		if !r.Geo.Mk.IsUnknown() && !r.Geo.Mk.IsNull() {
			*mk = r.Geo.Mk.ValueString()
		} else {
			mk = nil
		}
		mp := new(string)
		if !r.Geo.Mp.IsUnknown() && !r.Geo.Mp.IsNull() {
			*mp = r.Geo.Mp.ValueString()
		} else {
			mp = nil
		}
		no := new(string)
		if !r.Geo.No.IsUnknown() && !r.Geo.No.IsNull() {
			*no = r.Geo.No.ValueString()
		} else {
			no = nil
		}
		om := new(string)
		if !r.Geo.Om.IsUnknown() && !r.Geo.Om.IsNull() {
			*om = r.Geo.Om.ValueString()
		} else {
			om = nil
		}
		pk := new(string)
		if !r.Geo.Pk.IsUnknown() && !r.Geo.Pk.IsNull() {
			*pk = r.Geo.Pk.ValueString()
		} else {
			pk = nil
		}
		pw := new(string)
		if !r.Geo.Pw.IsUnknown() && !r.Geo.Pw.IsNull() {
			*pw = r.Geo.Pw.ValueString()
		} else {
			pw = nil
		}
		ps := new(string)
		if !r.Geo.Ps.IsUnknown() && !r.Geo.Ps.IsNull() {
			*ps = r.Geo.Ps.ValueString()
		} else {
			ps = nil
		}
		pa := new(string)
		if !r.Geo.Pa.IsUnknown() && !r.Geo.Pa.IsNull() {
			*pa = r.Geo.Pa.ValueString()
		} else {
			pa = nil
		}
		pg := new(string)
		if !r.Geo.Pg.IsUnknown() && !r.Geo.Pg.IsNull() {
			*pg = r.Geo.Pg.ValueString()
		} else {
			pg = nil
		}
		py := new(string)
		if !r.Geo.Py.IsUnknown() && !r.Geo.Py.IsNull() {
			*py = r.Geo.Py.ValueString()
		} else {
			py = nil
		}
		pe := new(string)
		if !r.Geo.Pe.IsUnknown() && !r.Geo.Pe.IsNull() {
			*pe = r.Geo.Pe.ValueString()
		} else {
			pe = nil
		}
		ph := new(string)
		if !r.Geo.Ph.IsUnknown() && !r.Geo.Ph.IsNull() {
			*ph = r.Geo.Ph.ValueString()
		} else {
			ph = nil
		}
		pn := new(string)
		if !r.Geo.Pn.IsUnknown() && !r.Geo.Pn.IsNull() {
			*pn = r.Geo.Pn.ValueString()
		} else {
			pn = nil
		}
		pl := new(string)
		if !r.Geo.Pl.IsUnknown() && !r.Geo.Pl.IsNull() {
			*pl = r.Geo.Pl.ValueString()
		} else {
			pl = nil
		}
		pt := new(string)
		if !r.Geo.Pt.IsUnknown() && !r.Geo.Pt.IsNull() {
			*pt = r.Geo.Pt.ValueString()
		} else {
			pt = nil
		}
		pr := new(string)
		if !r.Geo.Pr.IsUnknown() && !r.Geo.Pr.IsNull() {
			*pr = r.Geo.Pr.ValueString()
		} else {
			pr = nil
		}
		qa := new(string)
		if !r.Geo.Qa.IsUnknown() && !r.Geo.Qa.IsNull() {
			*qa = r.Geo.Qa.ValueString()
		} else {
			qa = nil
		}
		re := new(string)
		if !r.Geo.Re.IsUnknown() && !r.Geo.Re.IsNull() {
			*re = r.Geo.Re.ValueString()
		} else {
			re = nil
		}
		ro := new(string)
		if !r.Geo.Ro.IsUnknown() && !r.Geo.Ro.IsNull() {
			*ro = r.Geo.Ro.ValueString()
		} else {
			ro = nil
		}
		ru := new(string)
		if !r.Geo.Ru.IsUnknown() && !r.Geo.Ru.IsNull() {
			*ru = r.Geo.Ru.ValueString()
		} else {
			ru = nil
		}
		rw := new(string)
		if !r.Geo.Rw.IsUnknown() && !r.Geo.Rw.IsNull() {
			*rw = r.Geo.Rw.ValueString()
		} else {
			rw = nil
		}
		sh := new(string)
		if !r.Geo.Sh.IsUnknown() && !r.Geo.Sh.IsNull() {
			*sh = r.Geo.Sh.ValueString()
		} else {
			sh = nil
		}
		kn := new(string)
		if !r.Geo.Kn.IsUnknown() && !r.Geo.Kn.IsNull() {
			*kn = r.Geo.Kn.ValueString()
		} else {
			kn = nil
		}
		lc := new(string)
		if !r.Geo.Lc.IsUnknown() && !r.Geo.Lc.IsNull() {
			*lc = r.Geo.Lc.ValueString()
		} else {
			lc = nil
		}
		pm := new(string)
		if !r.Geo.Pm.IsUnknown() && !r.Geo.Pm.IsNull() {
			*pm = r.Geo.Pm.ValueString()
		} else {
			pm = nil
		}
		vc := new(string)
		if !r.Geo.Vc.IsUnknown() && !r.Geo.Vc.IsNull() {
			*vc = r.Geo.Vc.ValueString()
		} else {
			vc = nil
		}
		ws := new(string)
		if !r.Geo.Ws.IsUnknown() && !r.Geo.Ws.IsNull() {
			*ws = r.Geo.Ws.ValueString()
		} else {
			ws = nil
		}
		sm := new(string)
		if !r.Geo.Sm.IsUnknown() && !r.Geo.Sm.IsNull() {
			*sm = r.Geo.Sm.ValueString()
		} else {
			sm = nil
		}
		st := new(string)
		if !r.Geo.St.IsUnknown() && !r.Geo.St.IsNull() {
			*st = r.Geo.St.ValueString()
		} else {
			st = nil
		}
		sa := new(string)
		if !r.Geo.Sa.IsUnknown() && !r.Geo.Sa.IsNull() {
			*sa = r.Geo.Sa.ValueString()
		} else {
			sa = nil
		}
		sn := new(string)
		if !r.Geo.Sn.IsUnknown() && !r.Geo.Sn.IsNull() {
			*sn = r.Geo.Sn.ValueString()
		} else {
			sn = nil
		}
		sc := new(string)
		if !r.Geo.Sc.IsUnknown() && !r.Geo.Sc.IsNull() {
			*sc = r.Geo.Sc.ValueString()
		} else {
			sc = nil
		}
		sl := new(string)
		if !r.Geo.Sl.IsUnknown() && !r.Geo.Sl.IsNull() {
			*sl = r.Geo.Sl.ValueString()
		} else {
			sl = nil
		}
		sg := new(string)
		if !r.Geo.Sg.IsUnknown() && !r.Geo.Sg.IsNull() {
			*sg = r.Geo.Sg.ValueString()
		} else {
			sg = nil
		}
		sk := new(string)
		if !r.Geo.Sk.IsUnknown() && !r.Geo.Sk.IsNull() {
			*sk = r.Geo.Sk.ValueString()
		} else {
			sk = nil
		}
		si := new(string)
		if !r.Geo.Si.IsUnknown() && !r.Geo.Si.IsNull() {
			*si = r.Geo.Si.ValueString()
		} else {
			si = nil
		}
		sb := new(string)
		if !r.Geo.Sb.IsUnknown() && !r.Geo.Sb.IsNull() {
			*sb = r.Geo.Sb.ValueString()
		} else {
			sb = nil
		}
		so := new(string)
		if !r.Geo.So.IsUnknown() && !r.Geo.So.IsNull() {
			*so = r.Geo.So.ValueString()
		} else {
			so = nil
		}
		za := new(string)
		if !r.Geo.Za.IsUnknown() && !r.Geo.Za.IsNull() {
			*za = r.Geo.Za.ValueString()
		} else {
			za = nil
		}
		gs := new(string)
		if !r.Geo.Gs.IsUnknown() && !r.Geo.Gs.IsNull() {
			*gs = r.Geo.Gs.ValueString()
		} else {
			gs = nil
		}
		es := new(string)
		if !r.Geo.Es.IsUnknown() && !r.Geo.Es.IsNull() {
			*es = r.Geo.Es.ValueString()
		} else {
			es = nil
		}
		lk := new(string)
		if !r.Geo.Lk.IsUnknown() && !r.Geo.Lk.IsNull() {
			*lk = r.Geo.Lk.ValueString()
		} else {
			lk = nil
		}
		sd := new(string)
		if !r.Geo.Sd.IsUnknown() && !r.Geo.Sd.IsNull() {
			*sd = r.Geo.Sd.ValueString()
		} else {
			sd = nil
		}
		sr := new(string)
		if !r.Geo.Sr.IsUnknown() && !r.Geo.Sr.IsNull() {
			*sr = r.Geo.Sr.ValueString()
		} else {
			sr = nil
		}
		sj := new(string)
		if !r.Geo.Sj.IsUnknown() && !r.Geo.Sj.IsNull() {
			*sj = r.Geo.Sj.ValueString()
		} else {
			sj = nil
		}
		sz := new(string)
		if !r.Geo.Sz.IsUnknown() && !r.Geo.Sz.IsNull() {
			*sz = r.Geo.Sz.ValueString()
		} else {
			sz = nil
		}
		se := new(string)
		if !r.Geo.Se.IsUnknown() && !r.Geo.Se.IsNull() {
			*se = r.Geo.Se.ValueString()
		} else {
			se = nil
		}
		ch := new(string)
		if !r.Geo.Ch.IsUnknown() && !r.Geo.Ch.IsNull() {
			*ch = r.Geo.Ch.ValueString()
		} else {
			ch = nil
		}
		sy := new(string)
		if !r.Geo.Sy.IsUnknown() && !r.Geo.Sy.IsNull() {
			*sy = r.Geo.Sy.ValueString()
		} else {
			sy = nil
		}
		tw := new(string)
		if !r.Geo.Tw.IsUnknown() && !r.Geo.Tw.IsNull() {
			*tw = r.Geo.Tw.ValueString()
		} else {
			tw = nil
		}
		tj := new(string)
		if !r.Geo.Tj.IsUnknown() && !r.Geo.Tj.IsNull() {
			*tj = r.Geo.Tj.ValueString()
		} else {
			tj = nil
		}
		tz := new(string)
		if !r.Geo.Tz.IsUnknown() && !r.Geo.Tz.IsNull() {
			*tz = r.Geo.Tz.ValueString()
		} else {
			tz = nil
		}
		th := new(string)
		if !r.Geo.Th.IsUnknown() && !r.Geo.Th.IsNull() {
			*th = r.Geo.Th.ValueString()
		} else {
			th = nil
		}
		tl := new(string)
		if !r.Geo.Tl.IsUnknown() && !r.Geo.Tl.IsNull() {
			*tl = r.Geo.Tl.ValueString()
		} else {
			tl = nil
		}
		tg := new(string)
		if !r.Geo.Tg.IsUnknown() && !r.Geo.Tg.IsNull() {
			*tg = r.Geo.Tg.ValueString()
		} else {
			tg = nil
		}
		tk := new(string)
		if !r.Geo.Tk.IsUnknown() && !r.Geo.Tk.IsNull() {
			*tk = r.Geo.Tk.ValueString()
		} else {
			tk = nil
		}
		to := new(string)
		if !r.Geo.To.IsUnknown() && !r.Geo.To.IsNull() {
			*to = r.Geo.To.ValueString()
		} else {
			to = nil
		}
		tt := new(string)
		if !r.Geo.Tt.IsUnknown() && !r.Geo.Tt.IsNull() {
			*tt = r.Geo.Tt.ValueString()
		} else {
			tt = nil
		}
		tn := new(string)
		if !r.Geo.Tn.IsUnknown() && !r.Geo.Tn.IsNull() {
			*tn = r.Geo.Tn.ValueString()
		} else {
			tn = nil
		}
		tr := new(string)
		if !r.Geo.Tr.IsUnknown() && !r.Geo.Tr.IsNull() {
			*tr = r.Geo.Tr.ValueString()
		} else {
			tr = nil
		}
		tm := new(string)
		if !r.Geo.Tm.IsUnknown() && !r.Geo.Tm.IsNull() {
			*tm = r.Geo.Tm.ValueString()
		} else {
			tm = nil
		}
		tc := new(string)
		if !r.Geo.Tc.IsUnknown() && !r.Geo.Tc.IsNull() {
			*tc = r.Geo.Tc.ValueString()
		} else {
			tc = nil
		}
		tv := new(string)
		if !r.Geo.Tv.IsUnknown() && !r.Geo.Tv.IsNull() {
			*tv = r.Geo.Tv.ValueString()
		} else {
			tv = nil
		}
		ug := new(string)
		if !r.Geo.Ug.IsUnknown() && !r.Geo.Ug.IsNull() {
			*ug = r.Geo.Ug.ValueString()
		} else {
			ug = nil
		}
		ua := new(string)
		if !r.Geo.Ua.IsUnknown() && !r.Geo.Ua.IsNull() {
			*ua = r.Geo.Ua.ValueString()
		} else {
			ua = nil
		}
		ae := new(string)
		if !r.Geo.Ae.IsUnknown() && !r.Geo.Ae.IsNull() {
			*ae = r.Geo.Ae.ValueString()
		} else {
			ae = nil
		}
		gb := new(string)
		if !r.Geo.Gb.IsUnknown() && !r.Geo.Gb.IsNull() {
			*gb = r.Geo.Gb.ValueString()
		} else {
			gb = nil
		}
		us := new(string)
		if !r.Geo.Us.IsUnknown() && !r.Geo.Us.IsNull() {
			*us = r.Geo.Us.ValueString()
		} else {
			us = nil
		}
		um := new(string)
		if !r.Geo.Um.IsUnknown() && !r.Geo.Um.IsNull() {
			*um = r.Geo.Um.ValueString()
		} else {
			um = nil
		}
		uy := new(string)
		if !r.Geo.Uy.IsUnknown() && !r.Geo.Uy.IsNull() {
			*uy = r.Geo.Uy.ValueString()
		} else {
			uy = nil
		}
		uz := new(string)
		if !r.Geo.Uz.IsUnknown() && !r.Geo.Uz.IsNull() {
			*uz = r.Geo.Uz.ValueString()
		} else {
			uz = nil
		}
		vu := new(string)
		if !r.Geo.Vu.IsUnknown() && !r.Geo.Vu.IsNull() {
			*vu = r.Geo.Vu.ValueString()
		} else {
			vu = nil
		}
		ve := new(string)
		if !r.Geo.Ve.IsUnknown() && !r.Geo.Ve.IsNull() {
			*ve = r.Geo.Ve.ValueString()
		} else {
			ve = nil
		}
		vn := new(string)
		if !r.Geo.Vn.IsUnknown() && !r.Geo.Vn.IsNull() {
			*vn = r.Geo.Vn.ValueString()
		} else {
			vn = nil
		}
		vg := new(string)
		if !r.Geo.Vg.IsUnknown() && !r.Geo.Vg.IsNull() {
			*vg = r.Geo.Vg.ValueString()
		} else {
			vg = nil
		}
		vi := new(string)
		if !r.Geo.Vi.IsUnknown() && !r.Geo.Vi.IsNull() {
			*vi = r.Geo.Vi.ValueString()
		} else {
			vi = nil
		}
		wf := new(string)
		if !r.Geo.Wf.IsUnknown() && !r.Geo.Wf.IsNull() {
			*wf = r.Geo.Wf.ValueString()
		} else {
			wf = nil
		}
		eh := new(string)
		if !r.Geo.Eh.IsUnknown() && !r.Geo.Eh.IsNull() {
			*eh = r.Geo.Eh.ValueString()
		} else {
			eh = nil
		}
		ye := new(string)
		if !r.Geo.Ye.IsUnknown() && !r.Geo.Ye.IsNull() {
			*ye = r.Geo.Ye.ValueString()
		} else {
			ye = nil
		}
		zm := new(string)
		if !r.Geo.Zm.IsUnknown() && !r.Geo.Zm.IsNull() {
			*zm = r.Geo.Zm.ValueString()
		} else {
			zm = nil
		}
		zw := new(string)
		if !r.Geo.Zw.IsUnknown() && !r.Geo.Zw.IsNull() {
			*zw = r.Geo.Zw.ValueString()
		} else {
			zw = nil
		}
		ax := new(string)
		if !r.Geo.Ax.IsUnknown() && !r.Geo.Ax.IsNull() {
			*ax = r.Geo.Ax.ValueString()
		} else {
			ax = nil
		}
		bq := new(string)
		if !r.Geo.Bq.IsUnknown() && !r.Geo.Bq.IsNull() {
			*bq = r.Geo.Bq.ValueString()
		} else {
			bq = nil
		}
		cw := new(string)
		if !r.Geo.Cw.IsUnknown() && !r.Geo.Cw.IsNull() {
			*cw = r.Geo.Cw.ValueString()
		} else {
			cw = nil
		}
		gg := new(string)
		if !r.Geo.Gg.IsUnknown() && !r.Geo.Gg.IsNull() {
			*gg = r.Geo.Gg.ValueString()
		} else {
			gg = nil
		}
		im := new(string)
		if !r.Geo.Im.IsUnknown() && !r.Geo.Im.IsNull() {
			*im = r.Geo.Im.ValueString()
		} else {
			im = nil
		}
		je := new(string)
		if !r.Geo.Je.IsUnknown() && !r.Geo.Je.IsNull() {
			*je = r.Geo.Je.ValueString()
		} else {
			je = nil
		}
		me := new(string)
		if !r.Geo.Me.IsUnknown() && !r.Geo.Me.IsNull() {
			*me = r.Geo.Me.ValueString()
		} else {
			me = nil
		}
		bl := new(string)
		if !r.Geo.Bl.IsUnknown() && !r.Geo.Bl.IsNull() {
			*bl = r.Geo.Bl.ValueString()
		} else {
			bl = nil
		}
		mf := new(string)
		if !r.Geo.Mf.IsUnknown() && !r.Geo.Mf.IsNull() {
			*mf = r.Geo.Mf.ValueString()
		} else {
			mf = nil
		}
		rs := new(string)
		if !r.Geo.Rs.IsUnknown() && !r.Geo.Rs.IsNull() {
			*rs = r.Geo.Rs.ValueString()
		} else {
			rs = nil
		}
		sx := new(string)
		if !r.Geo.Sx.IsUnknown() && !r.Geo.Sx.IsNull() {
			*sx = r.Geo.Sx.ValueString()
		} else {
			sx = nil
		}
		ss := new(string)
		if !r.Geo.Ss.IsUnknown() && !r.Geo.Ss.IsNull() {
			*ss = r.Geo.Ss.ValueString()
		} else {
			ss = nil
		}
		xk := new(string)
		if !r.Geo.Xk.IsUnknown() && !r.Geo.Xk.IsNull() {
			*xk = r.Geo.Xk.ValueString()
		} else {
			xk = nil
		}
		geo = &shared.LinkGeoTargeting{
			Af: af,
			Al: al,
			Dz: dz,
			As: as,
			Ad: ad,
			Ao: ao,
			Ai: ai,
			Aq: aq,
			Ag: ag,
			Ar: ar,
			Am: am,
			Aw: aw,
			Au: au,
			At: at,
			Az: az,
			Bs: bs,
			Bh: bh,
			Bd: bd,
			Bb: bb,
			By: by,
			Be: be,
			Bz: bz,
			Bj: bj,
			Bm: bm,
			Bt: bt,
			Bo: bo,
			Ba: ba,
			Bw: bw,
			Bv: bv,
			Br: br,
			Io: io,
			Bn: bn,
			Bg: bg,
			Bf: bf,
			Bi: bi,
			Kh: kh,
			Cm: cm,
			Ca: ca,
			Cv: cv,
			Ky: ky,
			Cf: cf,
			Td: td,
			Cl: cl,
			Cn: cn,
			Cx: cx,
			Cc: cc,
			Co: co,
			Km: km,
			Cg: cg,
			Cd: cd,
			Ck: ck,
			Cr: cr,
			Ci: ci,
			Hr: hr,
			Cu: cu,
			Cy: cy,
			Cz: cz,
			Dk: dk,
			Dj: dj,
			Dm: dm,
			Do: do,
			Ec: ec,
			Eg: eg,
			Sv: sv,
			Gq: gq,
			Er: er,
			Ee: ee,
			Et: et,
			Fk: fk,
			Fo: fo,
			Fj: fj,
			Fi: fi,
			Fr: fr,
			Gf: gf,
			Pf: pf,
			Tf: tf,
			Ga: ga,
			Gm: gm,
			Ge: ge,
			De: de,
			Gh: gh,
			Gi: gi,
			Gr: gr,
			Gl: gl,
			Gd: gd,
			Gp: gp,
			Gu: gu,
			Gt: gt,
			Gn: gn,
			Gw: gw,
			Gy: gy,
			Ht: ht,
			Hm: hm,
			Va: va,
			Hn: hn,
			Hk: hk,
			Hu: hu,
			Is: is,
			In: in,
			ID: id,
			Ir: ir,
			Iq: iq,
			Ie: ie,
			Il: il,
			It: it,
			Jm: jm,
			Jp: jp,
			Jo: jo,
			Kz: kz,
			Ke: ke,
			Ki: ki,
			Kp: kp,
			Kr: kr,
			Kw: kw,
			Kg: kg,
			La: la,
			Lv: lv,
			Lb: lb,
			Ls: ls,
			Lr: lr,
			Ly: ly,
			Li: li,
			Lt: lt,
			Lu: lu,
			Mo: mo,
			Mg: mg,
			Mw: mw,
			My: my,
			Mv: mv,
			Ml: ml,
			Mt: mt,
			Mh: mh,
			Mq: mq,
			Mr: mr,
			Mu: mu,
			Yt: yt,
			Mx: mx,
			Fm: fm,
			Md: md,
			Mc: mc,
			Mn: mn,
			Ms: ms,
			Ma: ma,
			Mz: mz,
			Mm: mm,
			Na: na,
			Nr: nr,
			Np: np,
			Nl: nl,
			Nc: nc,
			Nz: nz,
			Ni: ni,
			Ne: ne,
			Ng: ng,
			Nu: nu,
			Nf: nf,
			Mk: mk,
			Mp: mp,
			No: no,
			Om: om,
			Pk: pk,
			Pw: pw,
			Ps: ps,
			Pa: pa,
			Pg: pg,
			Py: py,
			Pe: pe,
			Ph: ph,
			Pn: pn,
			Pl: pl,
			Pt: pt,
			Pr: pr,
			Qa: qa,
			Re: re,
			Ro: ro,
			Ru: ru,
			Rw: rw,
			Sh: sh,
			Kn: kn,
			Lc: lc,
			Pm: pm,
			Vc: vc,
			Ws: ws,
			Sm: sm,
			St: st,
			Sa: sa,
			Sn: sn,
			Sc: sc,
			Sl: sl,
			Sg: sg,
			Sk: sk,
			Si: si,
			Sb: sb,
			So: so,
			Za: za,
			Gs: gs,
			Es: es,
			Lk: lk,
			Sd: sd,
			Sr: sr,
			Sj: sj,
			Sz: sz,
			Se: se,
			Ch: ch,
			Sy: sy,
			Tw: tw,
			Tj: tj,
			Tz: tz,
			Th: th,
			Tl: tl,
			Tg: tg,
			Tk: tk,
			To: to,
			Tt: tt,
			Tn: tn,
			Tr: tr,
			Tm: tm,
			Tc: tc,
			Tv: tv,
			Ug: ug,
			Ua: ua,
			Ae: ae,
			Gb: gb,
			Us: us,
			Um: um,
			Uy: uy,
			Uz: uz,
			Vu: vu,
			Ve: ve,
			Vn: vn,
			Vg: vg,
			Vi: vi,
			Wf: wf,
			Eh: eh,
			Ye: ye,
			Zm: zm,
			Zw: zw,
			Ax: ax,
			Bq: bq,
			Cw: cw,
			Gg: gg,
			Im: im,
			Je: je,
			Me: me,
			Bl: bl,
			Mf: mf,
			Rs: rs,
			Sx: sx,
			Ss: ss,
			Xk: xk,
		}
	}
	doIndex := new(bool)
	if !r.DoIndex.IsUnknown() && !r.DoIndex.IsNull() {
		*doIndex = r.DoIndex.ValueBool()
	} else {
		doIndex = nil
	}
	utmSource := new(string)
	if !r.UtmSource.IsUnknown() && !r.UtmSource.IsNull() {
		*utmSource = r.UtmSource.ValueString()
	} else {
		utmSource = nil
	}
	utmMedium := new(string)
	if !r.UtmMedium.IsUnknown() && !r.UtmMedium.IsNull() {
		*utmMedium = r.UtmMedium.ValueString()
	} else {
		utmMedium = nil
	}
	utmCampaign := new(string)
	if !r.UtmCampaign.IsUnknown() && !r.UtmCampaign.IsNull() {
		*utmCampaign = r.UtmCampaign.ValueString()
	} else {
		utmCampaign = nil
	}
	utmTerm := new(string)
	if !r.UtmTerm.IsUnknown() && !r.UtmTerm.IsNull() {
		*utmTerm = r.UtmTerm.ValueString()
	} else {
		utmTerm = nil
	}
	utmContent := new(string)
	if !r.UtmContent.IsUnknown() && !r.UtmContent.IsNull() {
		*utmContent = r.UtmContent.ValueString()
	} else {
		utmContent = nil
	}
	ref := new(string)
	if !r.Ref.IsUnknown() && !r.Ref.IsNull() {
		*ref = r.Ref.ValueString()
	} else {
		ref = nil
	}
	var webhookIds []string
	if r.WebhookIds != nil {
		webhookIds = make([]string, 0, len(r.WebhookIds))
		for _, webhookIdsItem := range r.WebhookIds {
			webhookIds = append(webhookIds, webhookIdsItem.ValueString())
		}
	}
	var testVariants []operations.CreateLinkTestVariant
	if r.TestVariants != nil {
		testVariants = make([]operations.CreateLinkTestVariant, 0, len(r.TestVariants))
		for _, testVariantsItem := range r.TestVariants {
			var url1 string
			url1 = testVariantsItem.URL.ValueString()

			var percentage float64
			percentage = testVariantsItem.Percentage.ValueFloat64()

			testVariants = append(testVariants, operations.CreateLinkTestVariant{
				URL:        url1,
				Percentage: percentage,
			})
		}
	}
	testStartedAt := new(string)
	if !r.TestStartedAt.IsUnknown() && !r.TestStartedAt.IsNull() {
		*testStartedAt = r.TestStartedAt.ValueString()
	} else {
		testStartedAt = nil
	}
	testCompletedAt := new(string)
	if !r.TestCompletedAt.IsUnknown() && !r.TestCompletedAt.IsNull() {
		*testCompletedAt = r.TestCompletedAt.ValueString()
	} else {
		testCompletedAt = nil
	}
	out := operations.CreateLinkRequest{
		URL:             url,
		Domain:          domain,
		Key:             key,
		KeyLength:       keyLength,
		ExternalID:      externalID,
		TenantID:        tenantID,
		ProgramID:       programID,
		PartnerID:       partnerID,
		Prefix:          prefix,
		TrackConversion: trackConversion,
		Archived:        archived,
		PublicStats:     publicStats,
		TagID:           tagID,
		TagIds:          tagIds,
		TagNames:        tagNames,
		FolderID:        folderID,
		Comments:        comments,
		ExpiresAt:       expiresAt,
		ExpiredURL:      expiredURL,
		Password:        password,
		Proxy:           proxy,
		Title:           title,
		Description:     description,
		Image:           image,
		Video:           video,
		Rewrite:         rewrite,
		Ios:             ios,
		Android:         android,
		Geo:             geo,
		DoIndex:         doIndex,
		UtmSource:       utmSource,
		UtmMedium:       utmMedium,
		UtmCampaign:     utmCampaign,
		UtmTerm:         utmTerm,
		UtmContent:      utmContent,
		Ref:             ref,
		WebhookIds:      webhookIds,
		TestVariants:    testVariants,
		TestStartedAt:   testStartedAt,
		TestCompletedAt: testCompletedAt,
	}

	return &out, diags
}

func (r *LinkResourceModel) ToOperationsUpdateLinkRequestBody(ctx context.Context) (*operations.UpdateLinkRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	url := new(string)
	if !r.URL.IsUnknown() && !r.URL.IsNull() {
		*url = r.URL.ValueString()
	} else {
		url = nil
	}
	domain := new(string)
	if !r.Domain.IsUnknown() && !r.Domain.IsNull() {
		*domain = r.Domain.ValueString()
	} else {
		domain = nil
	}
	key := new(string)
	if !r.Key.IsUnknown() && !r.Key.IsNull() {
		*key = r.Key.ValueString()
	} else {
		key = nil
	}
	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	tenantID := new(string)
	if !r.TenantID.IsUnknown() && !r.TenantID.IsNull() {
		*tenantID = r.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	programID := new(string)
	if !r.ProgramID.IsUnknown() && !r.ProgramID.IsNull() {
		*programID = r.ProgramID.ValueString()
	} else {
		programID = nil
	}
	partnerID := new(string)
	if !r.PartnerID.IsUnknown() && !r.PartnerID.IsNull() {
		*partnerID = r.PartnerID.ValueString()
	} else {
		partnerID = nil
	}
	trackConversion := new(bool)
	if !r.TrackConversion.IsUnknown() && !r.TrackConversion.IsNull() {
		*trackConversion = r.TrackConversion.ValueBool()
	} else {
		trackConversion = nil
	}
	archived := new(bool)
	if !r.Archived.IsUnknown() && !r.Archived.IsNull() {
		*archived = r.Archived.ValueBool()
	} else {
		archived = nil
	}
	publicStats := new(bool)
	if !r.PublicStats.IsUnknown() && !r.PublicStats.IsNull() {
		*publicStats = r.PublicStats.ValueBool()
	} else {
		publicStats = nil
	}
	tagID := new(string)
	if !r.TagID.IsUnknown() && !r.TagID.IsNull() {
		*tagID = r.TagID.ValueString()
	} else {
		tagID = nil
	}
	var tagIds *operations.UpdateLinkTagIds
	if r.TagIds != nil {
		str := new(string)
		if !r.TagIds.Str.IsUnknown() && !r.TagIds.Str.IsNull() {
			*str = r.TagIds.Str.ValueString()
		} else {
			str = nil
		}
		if str != nil {
			tagIds = &operations.UpdateLinkTagIds{
				Str: str,
			}
		}
		var arrayOfStr []string
		if r.TagIds.ArrayOfStr != nil {
			arrayOfStr = make([]string, 0, len(r.TagIds.ArrayOfStr))
			for _, arrayOfStrItem := range r.TagIds.ArrayOfStr {
				arrayOfStr = append(arrayOfStr, arrayOfStrItem.ValueString())
			}
		}
		if arrayOfStr != nil {
			tagIds = &operations.UpdateLinkTagIds{
				ArrayOfStr: arrayOfStr,
			}
		}
	}
	var tagNames *operations.UpdateLinkTagNames
	if r.TagNames != nil {
		str1 := new(string)
		if !r.TagNames.Str.IsUnknown() && !r.TagNames.Str.IsNull() {
			*str1 = r.TagNames.Str.ValueString()
		} else {
			str1 = nil
		}
		if str1 != nil {
			tagNames = &operations.UpdateLinkTagNames{
				Str: str1,
			}
		}
		var arrayOfStr1 []string
		if r.TagNames.ArrayOfStr != nil {
			arrayOfStr1 = make([]string, 0, len(r.TagNames.ArrayOfStr))
			for _, arrayOfStrItem1 := range r.TagNames.ArrayOfStr {
				arrayOfStr1 = append(arrayOfStr1, arrayOfStrItem1.ValueString())
			}
		}
		if arrayOfStr1 != nil {
			tagNames = &operations.UpdateLinkTagNames{
				ArrayOfStr: arrayOfStr1,
			}
		}
	}
	folderID := new(string)
	if !r.FolderID.IsUnknown() && !r.FolderID.IsNull() {
		*folderID = r.FolderID.ValueString()
	} else {
		folderID = nil
	}
	comments := new(string)
	if !r.Comments.IsUnknown() && !r.Comments.IsNull() {
		*comments = r.Comments.ValueString()
	} else {
		comments = nil
	}
	expiresAt := new(string)
	if !r.ExpiresAt.IsUnknown() && !r.ExpiresAt.IsNull() {
		*expiresAt = r.ExpiresAt.ValueString()
	} else {
		expiresAt = nil
	}
	expiredURL := new(string)
	if !r.ExpiredURL.IsUnknown() && !r.ExpiredURL.IsNull() {
		*expiredURL = r.ExpiredURL.ValueString()
	} else {
		expiredURL = nil
	}
	password := new(string)
	if !r.Password.IsUnknown() && !r.Password.IsNull() {
		*password = r.Password.ValueString()
	} else {
		password = nil
	}
	proxy := new(bool)
	if !r.Proxy.IsUnknown() && !r.Proxy.IsNull() {
		*proxy = r.Proxy.ValueBool()
	} else {
		proxy = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	image := new(string)
	if !r.Image.IsUnknown() && !r.Image.IsNull() {
		*image = r.Image.ValueString()
	} else {
		image = nil
	}
	video := new(string)
	if !r.Video.IsUnknown() && !r.Video.IsNull() {
		*video = r.Video.ValueString()
	} else {
		video = nil
	}
	rewrite := new(bool)
	if !r.Rewrite.IsUnknown() && !r.Rewrite.IsNull() {
		*rewrite = r.Rewrite.ValueBool()
	} else {
		rewrite = nil
	}
	ios := new(string)
	if !r.Ios.IsUnknown() && !r.Ios.IsNull() {
		*ios = r.Ios.ValueString()
	} else {
		ios = nil
	}
	android := new(string)
	if !r.Android.IsUnknown() && !r.Android.IsNull() {
		*android = r.Android.ValueString()
	} else {
		android = nil
	}
	var geo *shared.LinkGeoTargeting
	if r.Geo != nil {
		af := new(string)
		if !r.Geo.Af.IsUnknown() && !r.Geo.Af.IsNull() {
			*af = r.Geo.Af.ValueString()
		} else {
			af = nil
		}
		al := new(string)
		if !r.Geo.Al.IsUnknown() && !r.Geo.Al.IsNull() {
			*al = r.Geo.Al.ValueString()
		} else {
			al = nil
		}
		dz := new(string)
		if !r.Geo.Dz.IsUnknown() && !r.Geo.Dz.IsNull() {
			*dz = r.Geo.Dz.ValueString()
		} else {
			dz = nil
		}
		as := new(string)
		if !r.Geo.As.IsUnknown() && !r.Geo.As.IsNull() {
			*as = r.Geo.As.ValueString()
		} else {
			as = nil
		}
		ad := new(string)
		if !r.Geo.Ad.IsUnknown() && !r.Geo.Ad.IsNull() {
			*ad = r.Geo.Ad.ValueString()
		} else {
			ad = nil
		}
		ao := new(string)
		if !r.Geo.Ao.IsUnknown() && !r.Geo.Ao.IsNull() {
			*ao = r.Geo.Ao.ValueString()
		} else {
			ao = nil
		}
		ai := new(string)
		if !r.Geo.Ai.IsUnknown() && !r.Geo.Ai.IsNull() {
			*ai = r.Geo.Ai.ValueString()
		} else {
			ai = nil
		}
		aq := new(string)
		if !r.Geo.Aq.IsUnknown() && !r.Geo.Aq.IsNull() {
			*aq = r.Geo.Aq.ValueString()
		} else {
			aq = nil
		}
		ag := new(string)
		if !r.Geo.Ag.IsUnknown() && !r.Geo.Ag.IsNull() {
			*ag = r.Geo.Ag.ValueString()
		} else {
			ag = nil
		}
		ar := new(string)
		if !r.Geo.Ar.IsUnknown() && !r.Geo.Ar.IsNull() {
			*ar = r.Geo.Ar.ValueString()
		} else {
			ar = nil
		}
		am := new(string)
		if !r.Geo.Am.IsUnknown() && !r.Geo.Am.IsNull() {
			*am = r.Geo.Am.ValueString()
		} else {
			am = nil
		}
		aw := new(string)
		if !r.Geo.Aw.IsUnknown() && !r.Geo.Aw.IsNull() {
			*aw = r.Geo.Aw.ValueString()
		} else {
			aw = nil
		}
		au := new(string)
		if !r.Geo.Au.IsUnknown() && !r.Geo.Au.IsNull() {
			*au = r.Geo.Au.ValueString()
		} else {
			au = nil
		}
		at := new(string)
		if !r.Geo.At.IsUnknown() && !r.Geo.At.IsNull() {
			*at = r.Geo.At.ValueString()
		} else {
			at = nil
		}
		az := new(string)
		if !r.Geo.Az.IsUnknown() && !r.Geo.Az.IsNull() {
			*az = r.Geo.Az.ValueString()
		} else {
			az = nil
		}
		bs := new(string)
		if !r.Geo.Bs.IsUnknown() && !r.Geo.Bs.IsNull() {
			*bs = r.Geo.Bs.ValueString()
		} else {
			bs = nil
		}
		bh := new(string)
		if !r.Geo.Bh.IsUnknown() && !r.Geo.Bh.IsNull() {
			*bh = r.Geo.Bh.ValueString()
		} else {
			bh = nil
		}
		bd := new(string)
		if !r.Geo.Bd.IsUnknown() && !r.Geo.Bd.IsNull() {
			*bd = r.Geo.Bd.ValueString()
		} else {
			bd = nil
		}
		bb := new(string)
		if !r.Geo.Bb.IsUnknown() && !r.Geo.Bb.IsNull() {
			*bb = r.Geo.Bb.ValueString()
		} else {
			bb = nil
		}
		by := new(string)
		if !r.Geo.By.IsUnknown() && !r.Geo.By.IsNull() {
			*by = r.Geo.By.ValueString()
		} else {
			by = nil
		}
		be := new(string)
		if !r.Geo.Be.IsUnknown() && !r.Geo.Be.IsNull() {
			*be = r.Geo.Be.ValueString()
		} else {
			be = nil
		}
		bz := new(string)
		if !r.Geo.Bz.IsUnknown() && !r.Geo.Bz.IsNull() {
			*bz = r.Geo.Bz.ValueString()
		} else {
			bz = nil
		}
		bj := new(string)
		if !r.Geo.Bj.IsUnknown() && !r.Geo.Bj.IsNull() {
			*bj = r.Geo.Bj.ValueString()
		} else {
			bj = nil
		}
		bm := new(string)
		if !r.Geo.Bm.IsUnknown() && !r.Geo.Bm.IsNull() {
			*bm = r.Geo.Bm.ValueString()
		} else {
			bm = nil
		}
		bt := new(string)
		if !r.Geo.Bt.IsUnknown() && !r.Geo.Bt.IsNull() {
			*bt = r.Geo.Bt.ValueString()
		} else {
			bt = nil
		}
		bo := new(string)
		if !r.Geo.Bo.IsUnknown() && !r.Geo.Bo.IsNull() {
			*bo = r.Geo.Bo.ValueString()
		} else {
			bo = nil
		}
		ba := new(string)
		if !r.Geo.Ba.IsUnknown() && !r.Geo.Ba.IsNull() {
			*ba = r.Geo.Ba.ValueString()
		} else {
			ba = nil
		}
		bw := new(string)
		if !r.Geo.Bw.IsUnknown() && !r.Geo.Bw.IsNull() {
			*bw = r.Geo.Bw.ValueString()
		} else {
			bw = nil
		}
		bv := new(string)
		if !r.Geo.Bv.IsUnknown() && !r.Geo.Bv.IsNull() {
			*bv = r.Geo.Bv.ValueString()
		} else {
			bv = nil
		}
		br := new(string)
		if !r.Geo.Br.IsUnknown() && !r.Geo.Br.IsNull() {
			*br = r.Geo.Br.ValueString()
		} else {
			br = nil
		}
		io := new(string)
		if !r.Geo.Io.IsUnknown() && !r.Geo.Io.IsNull() {
			*io = r.Geo.Io.ValueString()
		} else {
			io = nil
		}
		bn := new(string)
		if !r.Geo.Bn.IsUnknown() && !r.Geo.Bn.IsNull() {
			*bn = r.Geo.Bn.ValueString()
		} else {
			bn = nil
		}
		bg := new(string)
		if !r.Geo.Bg.IsUnknown() && !r.Geo.Bg.IsNull() {
			*bg = r.Geo.Bg.ValueString()
		} else {
			bg = nil
		}
		bf := new(string)
		if !r.Geo.Bf.IsUnknown() && !r.Geo.Bf.IsNull() {
			*bf = r.Geo.Bf.ValueString()
		} else {
			bf = nil
		}
		bi := new(string)
		if !r.Geo.Bi.IsUnknown() && !r.Geo.Bi.IsNull() {
			*bi = r.Geo.Bi.ValueString()
		} else {
			bi = nil
		}
		kh := new(string)
		if !r.Geo.Kh.IsUnknown() && !r.Geo.Kh.IsNull() {
			*kh = r.Geo.Kh.ValueString()
		} else {
			kh = nil
		}
		cm := new(string)
		if !r.Geo.Cm.IsUnknown() && !r.Geo.Cm.IsNull() {
			*cm = r.Geo.Cm.ValueString()
		} else {
			cm = nil
		}
		ca := new(string)
		if !r.Geo.Ca.IsUnknown() && !r.Geo.Ca.IsNull() {
			*ca = r.Geo.Ca.ValueString()
		} else {
			ca = nil
		}
		cv := new(string)
		if !r.Geo.Cv.IsUnknown() && !r.Geo.Cv.IsNull() {
			*cv = r.Geo.Cv.ValueString()
		} else {
			cv = nil
		}
		ky := new(string)
		if !r.Geo.Ky.IsUnknown() && !r.Geo.Ky.IsNull() {
			*ky = r.Geo.Ky.ValueString()
		} else {
			ky = nil
		}
		cf := new(string)
		if !r.Geo.Cf.IsUnknown() && !r.Geo.Cf.IsNull() {
			*cf = r.Geo.Cf.ValueString()
		} else {
			cf = nil
		}
		td := new(string)
		if !r.Geo.Td.IsUnknown() && !r.Geo.Td.IsNull() {
			*td = r.Geo.Td.ValueString()
		} else {
			td = nil
		}
		cl := new(string)
		if !r.Geo.Cl.IsUnknown() && !r.Geo.Cl.IsNull() {
			*cl = r.Geo.Cl.ValueString()
		} else {
			cl = nil
		}
		cn := new(string)
		if !r.Geo.Cn.IsUnknown() && !r.Geo.Cn.IsNull() {
			*cn = r.Geo.Cn.ValueString()
		} else {
			cn = nil
		}
		cx := new(string)
		if !r.Geo.Cx.IsUnknown() && !r.Geo.Cx.IsNull() {
			*cx = r.Geo.Cx.ValueString()
		} else {
			cx = nil
		}
		cc := new(string)
		if !r.Geo.Cc.IsUnknown() && !r.Geo.Cc.IsNull() {
			*cc = r.Geo.Cc.ValueString()
		} else {
			cc = nil
		}
		co := new(string)
		if !r.Geo.Co.IsUnknown() && !r.Geo.Co.IsNull() {
			*co = r.Geo.Co.ValueString()
		} else {
			co = nil
		}
		km := new(string)
		if !r.Geo.Km.IsUnknown() && !r.Geo.Km.IsNull() {
			*km = r.Geo.Km.ValueString()
		} else {
			km = nil
		}
		cg := new(string)
		if !r.Geo.Cg.IsUnknown() && !r.Geo.Cg.IsNull() {
			*cg = r.Geo.Cg.ValueString()
		} else {
			cg = nil
		}
		cd := new(string)
		if !r.Geo.Cd.IsUnknown() && !r.Geo.Cd.IsNull() {
			*cd = r.Geo.Cd.ValueString()
		} else {
			cd = nil
		}
		ck := new(string)
		if !r.Geo.Ck.IsUnknown() && !r.Geo.Ck.IsNull() {
			*ck = r.Geo.Ck.ValueString()
		} else {
			ck = nil
		}
		cr := new(string)
		if !r.Geo.Cr.IsUnknown() && !r.Geo.Cr.IsNull() {
			*cr = r.Geo.Cr.ValueString()
		} else {
			cr = nil
		}
		ci := new(string)
		if !r.Geo.Ci.IsUnknown() && !r.Geo.Ci.IsNull() {
			*ci = r.Geo.Ci.ValueString()
		} else {
			ci = nil
		}
		hr := new(string)
		if !r.Geo.Hr.IsUnknown() && !r.Geo.Hr.IsNull() {
			*hr = r.Geo.Hr.ValueString()
		} else {
			hr = nil
		}
		cu := new(string)
		if !r.Geo.Cu.IsUnknown() && !r.Geo.Cu.IsNull() {
			*cu = r.Geo.Cu.ValueString()
		} else {
			cu = nil
		}
		cy := new(string)
		if !r.Geo.Cy.IsUnknown() && !r.Geo.Cy.IsNull() {
			*cy = r.Geo.Cy.ValueString()
		} else {
			cy = nil
		}
		cz := new(string)
		if !r.Geo.Cz.IsUnknown() && !r.Geo.Cz.IsNull() {
			*cz = r.Geo.Cz.ValueString()
		} else {
			cz = nil
		}
		dk := new(string)
		if !r.Geo.Dk.IsUnknown() && !r.Geo.Dk.IsNull() {
			*dk = r.Geo.Dk.ValueString()
		} else {
			dk = nil
		}
		dj := new(string)
		if !r.Geo.Dj.IsUnknown() && !r.Geo.Dj.IsNull() {
			*dj = r.Geo.Dj.ValueString()
		} else {
			dj = nil
		}
		dm := new(string)
		if !r.Geo.Dm.IsUnknown() && !r.Geo.Dm.IsNull() {
			*dm = r.Geo.Dm.ValueString()
		} else {
			dm = nil
		}
		do := new(string)
		if !r.Geo.Do.IsUnknown() && !r.Geo.Do.IsNull() {
			*do = r.Geo.Do.ValueString()
		} else {
			do = nil
		}
		ec := new(string)
		if !r.Geo.Ec.IsUnknown() && !r.Geo.Ec.IsNull() {
			*ec = r.Geo.Ec.ValueString()
		} else {
			ec = nil
		}
		eg := new(string)
		if !r.Geo.Eg.IsUnknown() && !r.Geo.Eg.IsNull() {
			*eg = r.Geo.Eg.ValueString()
		} else {
			eg = nil
		}
		sv := new(string)
		if !r.Geo.Sv.IsUnknown() && !r.Geo.Sv.IsNull() {
			*sv = r.Geo.Sv.ValueString()
		} else {
			sv = nil
		}
		gq := new(string)
		if !r.Geo.Gq.IsUnknown() && !r.Geo.Gq.IsNull() {
			*gq = r.Geo.Gq.ValueString()
		} else {
			gq = nil
		}
		er := new(string)
		if !r.Geo.Er.IsUnknown() && !r.Geo.Er.IsNull() {
			*er = r.Geo.Er.ValueString()
		} else {
			er = nil
		}
		ee := new(string)
		if !r.Geo.Ee.IsUnknown() && !r.Geo.Ee.IsNull() {
			*ee = r.Geo.Ee.ValueString()
		} else {
			ee = nil
		}
		et := new(string)
		if !r.Geo.Et.IsUnknown() && !r.Geo.Et.IsNull() {
			*et = r.Geo.Et.ValueString()
		} else {
			et = nil
		}
		fk := new(string)
		if !r.Geo.Fk.IsUnknown() && !r.Geo.Fk.IsNull() {
			*fk = r.Geo.Fk.ValueString()
		} else {
			fk = nil
		}
		fo := new(string)
		if !r.Geo.Fo.IsUnknown() && !r.Geo.Fo.IsNull() {
			*fo = r.Geo.Fo.ValueString()
		} else {
			fo = nil
		}
		fj := new(string)
		if !r.Geo.Fj.IsUnknown() && !r.Geo.Fj.IsNull() {
			*fj = r.Geo.Fj.ValueString()
		} else {
			fj = nil
		}
		fi := new(string)
		if !r.Geo.Fi.IsUnknown() && !r.Geo.Fi.IsNull() {
			*fi = r.Geo.Fi.ValueString()
		} else {
			fi = nil
		}
		fr := new(string)
		if !r.Geo.Fr.IsUnknown() && !r.Geo.Fr.IsNull() {
			*fr = r.Geo.Fr.ValueString()
		} else {
			fr = nil
		}
		gf := new(string)
		if !r.Geo.Gf.IsUnknown() && !r.Geo.Gf.IsNull() {
			*gf = r.Geo.Gf.ValueString()
		} else {
			gf = nil
		}
		pf := new(string)
		if !r.Geo.Pf.IsUnknown() && !r.Geo.Pf.IsNull() {
			*pf = r.Geo.Pf.ValueString()
		} else {
			pf = nil
		}
		tf := new(string)
		if !r.Geo.Tf.IsUnknown() && !r.Geo.Tf.IsNull() {
			*tf = r.Geo.Tf.ValueString()
		} else {
			tf = nil
		}
		ga := new(string)
		if !r.Geo.Ga.IsUnknown() && !r.Geo.Ga.IsNull() {
			*ga = r.Geo.Ga.ValueString()
		} else {
			ga = nil
		}
		gm := new(string)
		if !r.Geo.Gm.IsUnknown() && !r.Geo.Gm.IsNull() {
			*gm = r.Geo.Gm.ValueString()
		} else {
			gm = nil
		}
		ge := new(string)
		if !r.Geo.Ge.IsUnknown() && !r.Geo.Ge.IsNull() {
			*ge = r.Geo.Ge.ValueString()
		} else {
			ge = nil
		}
		de := new(string)
		if !r.Geo.De.IsUnknown() && !r.Geo.De.IsNull() {
			*de = r.Geo.De.ValueString()
		} else {
			de = nil
		}
		gh := new(string)
		if !r.Geo.Gh.IsUnknown() && !r.Geo.Gh.IsNull() {
			*gh = r.Geo.Gh.ValueString()
		} else {
			gh = nil
		}
		gi := new(string)
		if !r.Geo.Gi.IsUnknown() && !r.Geo.Gi.IsNull() {
			*gi = r.Geo.Gi.ValueString()
		} else {
			gi = nil
		}
		gr := new(string)
		if !r.Geo.Gr.IsUnknown() && !r.Geo.Gr.IsNull() {
			*gr = r.Geo.Gr.ValueString()
		} else {
			gr = nil
		}
		gl := new(string)
		if !r.Geo.Gl.IsUnknown() && !r.Geo.Gl.IsNull() {
			*gl = r.Geo.Gl.ValueString()
		} else {
			gl = nil
		}
		gd := new(string)
		if !r.Geo.Gd.IsUnknown() && !r.Geo.Gd.IsNull() {
			*gd = r.Geo.Gd.ValueString()
		} else {
			gd = nil
		}
		gp := new(string)
		if !r.Geo.Gp.IsUnknown() && !r.Geo.Gp.IsNull() {
			*gp = r.Geo.Gp.ValueString()
		} else {
			gp = nil
		}
		gu := new(string)
		if !r.Geo.Gu.IsUnknown() && !r.Geo.Gu.IsNull() {
			*gu = r.Geo.Gu.ValueString()
		} else {
			gu = nil
		}
		gt := new(string)
		if !r.Geo.Gt.IsUnknown() && !r.Geo.Gt.IsNull() {
			*gt = r.Geo.Gt.ValueString()
		} else {
			gt = nil
		}
		gn := new(string)
		if !r.Geo.Gn.IsUnknown() && !r.Geo.Gn.IsNull() {
			*gn = r.Geo.Gn.ValueString()
		} else {
			gn = nil
		}
		gw := new(string)
		if !r.Geo.Gw.IsUnknown() && !r.Geo.Gw.IsNull() {
			*gw = r.Geo.Gw.ValueString()
		} else {
			gw = nil
		}
		gy := new(string)
		if !r.Geo.Gy.IsUnknown() && !r.Geo.Gy.IsNull() {
			*gy = r.Geo.Gy.ValueString()
		} else {
			gy = nil
		}
		ht := new(string)
		if !r.Geo.Ht.IsUnknown() && !r.Geo.Ht.IsNull() {
			*ht = r.Geo.Ht.ValueString()
		} else {
			ht = nil
		}
		hm := new(string)
		if !r.Geo.Hm.IsUnknown() && !r.Geo.Hm.IsNull() {
			*hm = r.Geo.Hm.ValueString()
		} else {
			hm = nil
		}
		va := new(string)
		if !r.Geo.Va.IsUnknown() && !r.Geo.Va.IsNull() {
			*va = r.Geo.Va.ValueString()
		} else {
			va = nil
		}
		hn := new(string)
		if !r.Geo.Hn.IsUnknown() && !r.Geo.Hn.IsNull() {
			*hn = r.Geo.Hn.ValueString()
		} else {
			hn = nil
		}
		hk := new(string)
		if !r.Geo.Hk.IsUnknown() && !r.Geo.Hk.IsNull() {
			*hk = r.Geo.Hk.ValueString()
		} else {
			hk = nil
		}
		hu := new(string)
		if !r.Geo.Hu.IsUnknown() && !r.Geo.Hu.IsNull() {
			*hu = r.Geo.Hu.ValueString()
		} else {
			hu = nil
		}
		is := new(string)
		if !r.Geo.Is.IsUnknown() && !r.Geo.Is.IsNull() {
			*is = r.Geo.Is.ValueString()
		} else {
			is = nil
		}
		in := new(string)
		if !r.Geo.In.IsUnknown() && !r.Geo.In.IsNull() {
			*in = r.Geo.In.ValueString()
		} else {
			in = nil
		}
		id := new(string)
		if !r.Geo.ID.IsUnknown() && !r.Geo.ID.IsNull() {
			*id = r.Geo.ID.ValueString()
		} else {
			id = nil
		}
		ir := new(string)
		if !r.Geo.Ir.IsUnknown() && !r.Geo.Ir.IsNull() {
			*ir = r.Geo.Ir.ValueString()
		} else {
			ir = nil
		}
		iq := new(string)
		if !r.Geo.Iq.IsUnknown() && !r.Geo.Iq.IsNull() {
			*iq = r.Geo.Iq.ValueString()
		} else {
			iq = nil
		}
		ie := new(string)
		if !r.Geo.Ie.IsUnknown() && !r.Geo.Ie.IsNull() {
			*ie = r.Geo.Ie.ValueString()
		} else {
			ie = nil
		}
		il := new(string)
		if !r.Geo.Il.IsUnknown() && !r.Geo.Il.IsNull() {
			*il = r.Geo.Il.ValueString()
		} else {
			il = nil
		}
		it := new(string)
		if !r.Geo.It.IsUnknown() && !r.Geo.It.IsNull() {
			*it = r.Geo.It.ValueString()
		} else {
			it = nil
		}
		jm := new(string)
		if !r.Geo.Jm.IsUnknown() && !r.Geo.Jm.IsNull() {
			*jm = r.Geo.Jm.ValueString()
		} else {
			jm = nil
		}
		jp := new(string)
		if !r.Geo.Jp.IsUnknown() && !r.Geo.Jp.IsNull() {
			*jp = r.Geo.Jp.ValueString()
		} else {
			jp = nil
		}
		jo := new(string)
		if !r.Geo.Jo.IsUnknown() && !r.Geo.Jo.IsNull() {
			*jo = r.Geo.Jo.ValueString()
		} else {
			jo = nil
		}
		kz := new(string)
		if !r.Geo.Kz.IsUnknown() && !r.Geo.Kz.IsNull() {
			*kz = r.Geo.Kz.ValueString()
		} else {
			kz = nil
		}
		ke := new(string)
		if !r.Geo.Ke.IsUnknown() && !r.Geo.Ke.IsNull() {
			*ke = r.Geo.Ke.ValueString()
		} else {
			ke = nil
		}
		ki := new(string)
		if !r.Geo.Ki.IsUnknown() && !r.Geo.Ki.IsNull() {
			*ki = r.Geo.Ki.ValueString()
		} else {
			ki = nil
		}
		kp := new(string)
		if !r.Geo.Kp.IsUnknown() && !r.Geo.Kp.IsNull() {
			*kp = r.Geo.Kp.ValueString()
		} else {
			kp = nil
		}
		kr := new(string)
		if !r.Geo.Kr.IsUnknown() && !r.Geo.Kr.IsNull() {
			*kr = r.Geo.Kr.ValueString()
		} else {
			kr = nil
		}
		kw := new(string)
		if !r.Geo.Kw.IsUnknown() && !r.Geo.Kw.IsNull() {
			*kw = r.Geo.Kw.ValueString()
		} else {
			kw = nil
		}
		kg := new(string)
		if !r.Geo.Kg.IsUnknown() && !r.Geo.Kg.IsNull() {
			*kg = r.Geo.Kg.ValueString()
		} else {
			kg = nil
		}
		la := new(string)
		if !r.Geo.La.IsUnknown() && !r.Geo.La.IsNull() {
			*la = r.Geo.La.ValueString()
		} else {
			la = nil
		}
		lv := new(string)
		if !r.Geo.Lv.IsUnknown() && !r.Geo.Lv.IsNull() {
			*lv = r.Geo.Lv.ValueString()
		} else {
			lv = nil
		}
		lb := new(string)
		if !r.Geo.Lb.IsUnknown() && !r.Geo.Lb.IsNull() {
			*lb = r.Geo.Lb.ValueString()
		} else {
			lb = nil
		}
		ls := new(string)
		if !r.Geo.Ls.IsUnknown() && !r.Geo.Ls.IsNull() {
			*ls = r.Geo.Ls.ValueString()
		} else {
			ls = nil
		}
		lr := new(string)
		if !r.Geo.Lr.IsUnknown() && !r.Geo.Lr.IsNull() {
			*lr = r.Geo.Lr.ValueString()
		} else {
			lr = nil
		}
		ly := new(string)
		if !r.Geo.Ly.IsUnknown() && !r.Geo.Ly.IsNull() {
			*ly = r.Geo.Ly.ValueString()
		} else {
			ly = nil
		}
		li := new(string)
		if !r.Geo.Li.IsUnknown() && !r.Geo.Li.IsNull() {
			*li = r.Geo.Li.ValueString()
		} else {
			li = nil
		}
		lt := new(string)
		if !r.Geo.Lt.IsUnknown() && !r.Geo.Lt.IsNull() {
			*lt = r.Geo.Lt.ValueString()
		} else {
			lt = nil
		}
		lu := new(string)
		if !r.Geo.Lu.IsUnknown() && !r.Geo.Lu.IsNull() {
			*lu = r.Geo.Lu.ValueString()
		} else {
			lu = nil
		}
		mo := new(string)
		if !r.Geo.Mo.IsUnknown() && !r.Geo.Mo.IsNull() {
			*mo = r.Geo.Mo.ValueString()
		} else {
			mo = nil
		}
		mg := new(string)
		if !r.Geo.Mg.IsUnknown() && !r.Geo.Mg.IsNull() {
			*mg = r.Geo.Mg.ValueString()
		} else {
			mg = nil
		}
		mw := new(string)
		if !r.Geo.Mw.IsUnknown() && !r.Geo.Mw.IsNull() {
			*mw = r.Geo.Mw.ValueString()
		} else {
			mw = nil
		}
		my := new(string)
		if !r.Geo.My.IsUnknown() && !r.Geo.My.IsNull() {
			*my = r.Geo.My.ValueString()
		} else {
			my = nil
		}
		mv := new(string)
		if !r.Geo.Mv.IsUnknown() && !r.Geo.Mv.IsNull() {
			*mv = r.Geo.Mv.ValueString()
		} else {
			mv = nil
		}
		ml := new(string)
		if !r.Geo.Ml.IsUnknown() && !r.Geo.Ml.IsNull() {
			*ml = r.Geo.Ml.ValueString()
		} else {
			ml = nil
		}
		mt := new(string)
		if !r.Geo.Mt.IsUnknown() && !r.Geo.Mt.IsNull() {
			*mt = r.Geo.Mt.ValueString()
		} else {
			mt = nil
		}
		mh := new(string)
		if !r.Geo.Mh.IsUnknown() && !r.Geo.Mh.IsNull() {
			*mh = r.Geo.Mh.ValueString()
		} else {
			mh = nil
		}
		mq := new(string)
		if !r.Geo.Mq.IsUnknown() && !r.Geo.Mq.IsNull() {
			*mq = r.Geo.Mq.ValueString()
		} else {
			mq = nil
		}
		mr := new(string)
		if !r.Geo.Mr.IsUnknown() && !r.Geo.Mr.IsNull() {
			*mr = r.Geo.Mr.ValueString()
		} else {
			mr = nil
		}
		mu := new(string)
		if !r.Geo.Mu.IsUnknown() && !r.Geo.Mu.IsNull() {
			*mu = r.Geo.Mu.ValueString()
		} else {
			mu = nil
		}
		yt := new(string)
		if !r.Geo.Yt.IsUnknown() && !r.Geo.Yt.IsNull() {
			*yt = r.Geo.Yt.ValueString()
		} else {
			yt = nil
		}
		mx := new(string)
		if !r.Geo.Mx.IsUnknown() && !r.Geo.Mx.IsNull() {
			*mx = r.Geo.Mx.ValueString()
		} else {
			mx = nil
		}
		fm := new(string)
		if !r.Geo.Fm.IsUnknown() && !r.Geo.Fm.IsNull() {
			*fm = r.Geo.Fm.ValueString()
		} else {
			fm = nil
		}
		md := new(string)
		if !r.Geo.Md.IsUnknown() && !r.Geo.Md.IsNull() {
			*md = r.Geo.Md.ValueString()
		} else {
			md = nil
		}
		mc := new(string)
		if !r.Geo.Mc.IsUnknown() && !r.Geo.Mc.IsNull() {
			*mc = r.Geo.Mc.ValueString()
		} else {
			mc = nil
		}
		mn := new(string)
		if !r.Geo.Mn.IsUnknown() && !r.Geo.Mn.IsNull() {
			*mn = r.Geo.Mn.ValueString()
		} else {
			mn = nil
		}
		ms := new(string)
		if !r.Geo.Ms.IsUnknown() && !r.Geo.Ms.IsNull() {
			*ms = r.Geo.Ms.ValueString()
		} else {
			ms = nil
		}
		ma := new(string)
		if !r.Geo.Ma.IsUnknown() && !r.Geo.Ma.IsNull() {
			*ma = r.Geo.Ma.ValueString()
		} else {
			ma = nil
		}
		mz := new(string)
		if !r.Geo.Mz.IsUnknown() && !r.Geo.Mz.IsNull() {
			*mz = r.Geo.Mz.ValueString()
		} else {
			mz = nil
		}
		mm := new(string)
		if !r.Geo.Mm.IsUnknown() && !r.Geo.Mm.IsNull() {
			*mm = r.Geo.Mm.ValueString()
		} else {
			mm = nil
		}
		na := new(string)
		if !r.Geo.Na.IsUnknown() && !r.Geo.Na.IsNull() {
			*na = r.Geo.Na.ValueString()
		} else {
			na = nil
		}
		nr := new(string)
		if !r.Geo.Nr.IsUnknown() && !r.Geo.Nr.IsNull() {
			*nr = r.Geo.Nr.ValueString()
		} else {
			nr = nil
		}
		np := new(string)
		if !r.Geo.Np.IsUnknown() && !r.Geo.Np.IsNull() {
			*np = r.Geo.Np.ValueString()
		} else {
			np = nil
		}
		nl := new(string)
		if !r.Geo.Nl.IsUnknown() && !r.Geo.Nl.IsNull() {
			*nl = r.Geo.Nl.ValueString()
		} else {
			nl = nil
		}
		nc := new(string)
		if !r.Geo.Nc.IsUnknown() && !r.Geo.Nc.IsNull() {
			*nc = r.Geo.Nc.ValueString()
		} else {
			nc = nil
		}
		nz := new(string)
		if !r.Geo.Nz.IsUnknown() && !r.Geo.Nz.IsNull() {
			*nz = r.Geo.Nz.ValueString()
		} else {
			nz = nil
		}
		ni := new(string)
		if !r.Geo.Ni.IsUnknown() && !r.Geo.Ni.IsNull() {
			*ni = r.Geo.Ni.ValueString()
		} else {
			ni = nil
		}
		ne := new(string)
		if !r.Geo.Ne.IsUnknown() && !r.Geo.Ne.IsNull() {
			*ne = r.Geo.Ne.ValueString()
		} else {
			ne = nil
		}
		ng := new(string)
		if !r.Geo.Ng.IsUnknown() && !r.Geo.Ng.IsNull() {
			*ng = r.Geo.Ng.ValueString()
		} else {
			ng = nil
		}
		nu := new(string)
		if !r.Geo.Nu.IsUnknown() && !r.Geo.Nu.IsNull() {
			*nu = r.Geo.Nu.ValueString()
		} else {
			nu = nil
		}
		nf := new(string)
		if !r.Geo.Nf.IsUnknown() && !r.Geo.Nf.IsNull() {
			*nf = r.Geo.Nf.ValueString()
		} else {
			nf = nil
		}
		mk := new(string)
		if !r.Geo.Mk.IsUnknown() && !r.Geo.Mk.IsNull() {
			*mk = r.Geo.Mk.ValueString()
		} else {
			mk = nil
		}
		mp := new(string)
		if !r.Geo.Mp.IsUnknown() && !r.Geo.Mp.IsNull() {
			*mp = r.Geo.Mp.ValueString()
		} else {
			mp = nil
		}
		no := new(string)
		if !r.Geo.No.IsUnknown() && !r.Geo.No.IsNull() {
			*no = r.Geo.No.ValueString()
		} else {
			no = nil
		}
		om := new(string)
		if !r.Geo.Om.IsUnknown() && !r.Geo.Om.IsNull() {
			*om = r.Geo.Om.ValueString()
		} else {
			om = nil
		}
		pk := new(string)
		if !r.Geo.Pk.IsUnknown() && !r.Geo.Pk.IsNull() {
			*pk = r.Geo.Pk.ValueString()
		} else {
			pk = nil
		}
		pw := new(string)
		if !r.Geo.Pw.IsUnknown() && !r.Geo.Pw.IsNull() {
			*pw = r.Geo.Pw.ValueString()
		} else {
			pw = nil
		}
		ps := new(string)
		if !r.Geo.Ps.IsUnknown() && !r.Geo.Ps.IsNull() {
			*ps = r.Geo.Ps.ValueString()
		} else {
			ps = nil
		}
		pa := new(string)
		if !r.Geo.Pa.IsUnknown() && !r.Geo.Pa.IsNull() {
			*pa = r.Geo.Pa.ValueString()
		} else {
			pa = nil
		}
		pg := new(string)
		if !r.Geo.Pg.IsUnknown() && !r.Geo.Pg.IsNull() {
			*pg = r.Geo.Pg.ValueString()
		} else {
			pg = nil
		}
		py := new(string)
		if !r.Geo.Py.IsUnknown() && !r.Geo.Py.IsNull() {
			*py = r.Geo.Py.ValueString()
		} else {
			py = nil
		}
		pe := new(string)
		if !r.Geo.Pe.IsUnknown() && !r.Geo.Pe.IsNull() {
			*pe = r.Geo.Pe.ValueString()
		} else {
			pe = nil
		}
		ph := new(string)
		if !r.Geo.Ph.IsUnknown() && !r.Geo.Ph.IsNull() {
			*ph = r.Geo.Ph.ValueString()
		} else {
			ph = nil
		}
		pn := new(string)
		if !r.Geo.Pn.IsUnknown() && !r.Geo.Pn.IsNull() {
			*pn = r.Geo.Pn.ValueString()
		} else {
			pn = nil
		}
		pl := new(string)
		if !r.Geo.Pl.IsUnknown() && !r.Geo.Pl.IsNull() {
			*pl = r.Geo.Pl.ValueString()
		} else {
			pl = nil
		}
		pt := new(string)
		if !r.Geo.Pt.IsUnknown() && !r.Geo.Pt.IsNull() {
			*pt = r.Geo.Pt.ValueString()
		} else {
			pt = nil
		}
		pr := new(string)
		if !r.Geo.Pr.IsUnknown() && !r.Geo.Pr.IsNull() {
			*pr = r.Geo.Pr.ValueString()
		} else {
			pr = nil
		}
		qa := new(string)
		if !r.Geo.Qa.IsUnknown() && !r.Geo.Qa.IsNull() {
			*qa = r.Geo.Qa.ValueString()
		} else {
			qa = nil
		}
		re := new(string)
		if !r.Geo.Re.IsUnknown() && !r.Geo.Re.IsNull() {
			*re = r.Geo.Re.ValueString()
		} else {
			re = nil
		}
		ro := new(string)
		if !r.Geo.Ro.IsUnknown() && !r.Geo.Ro.IsNull() {
			*ro = r.Geo.Ro.ValueString()
		} else {
			ro = nil
		}
		ru := new(string)
		if !r.Geo.Ru.IsUnknown() && !r.Geo.Ru.IsNull() {
			*ru = r.Geo.Ru.ValueString()
		} else {
			ru = nil
		}
		rw := new(string)
		if !r.Geo.Rw.IsUnknown() && !r.Geo.Rw.IsNull() {
			*rw = r.Geo.Rw.ValueString()
		} else {
			rw = nil
		}
		sh := new(string)
		if !r.Geo.Sh.IsUnknown() && !r.Geo.Sh.IsNull() {
			*sh = r.Geo.Sh.ValueString()
		} else {
			sh = nil
		}
		kn := new(string)
		if !r.Geo.Kn.IsUnknown() && !r.Geo.Kn.IsNull() {
			*kn = r.Geo.Kn.ValueString()
		} else {
			kn = nil
		}
		lc := new(string)
		if !r.Geo.Lc.IsUnknown() && !r.Geo.Lc.IsNull() {
			*lc = r.Geo.Lc.ValueString()
		} else {
			lc = nil
		}
		pm := new(string)
		if !r.Geo.Pm.IsUnknown() && !r.Geo.Pm.IsNull() {
			*pm = r.Geo.Pm.ValueString()
		} else {
			pm = nil
		}
		vc := new(string)
		if !r.Geo.Vc.IsUnknown() && !r.Geo.Vc.IsNull() {
			*vc = r.Geo.Vc.ValueString()
		} else {
			vc = nil
		}
		ws := new(string)
		if !r.Geo.Ws.IsUnknown() && !r.Geo.Ws.IsNull() {
			*ws = r.Geo.Ws.ValueString()
		} else {
			ws = nil
		}
		sm := new(string)
		if !r.Geo.Sm.IsUnknown() && !r.Geo.Sm.IsNull() {
			*sm = r.Geo.Sm.ValueString()
		} else {
			sm = nil
		}
		st := new(string)
		if !r.Geo.St.IsUnknown() && !r.Geo.St.IsNull() {
			*st = r.Geo.St.ValueString()
		} else {
			st = nil
		}
		sa := new(string)
		if !r.Geo.Sa.IsUnknown() && !r.Geo.Sa.IsNull() {
			*sa = r.Geo.Sa.ValueString()
		} else {
			sa = nil
		}
		sn := new(string)
		if !r.Geo.Sn.IsUnknown() && !r.Geo.Sn.IsNull() {
			*sn = r.Geo.Sn.ValueString()
		} else {
			sn = nil
		}
		sc := new(string)
		if !r.Geo.Sc.IsUnknown() && !r.Geo.Sc.IsNull() {
			*sc = r.Geo.Sc.ValueString()
		} else {
			sc = nil
		}
		sl := new(string)
		if !r.Geo.Sl.IsUnknown() && !r.Geo.Sl.IsNull() {
			*sl = r.Geo.Sl.ValueString()
		} else {
			sl = nil
		}
		sg := new(string)
		if !r.Geo.Sg.IsUnknown() && !r.Geo.Sg.IsNull() {
			*sg = r.Geo.Sg.ValueString()
		} else {
			sg = nil
		}
		sk := new(string)
		if !r.Geo.Sk.IsUnknown() && !r.Geo.Sk.IsNull() {
			*sk = r.Geo.Sk.ValueString()
		} else {
			sk = nil
		}
		si := new(string)
		if !r.Geo.Si.IsUnknown() && !r.Geo.Si.IsNull() {
			*si = r.Geo.Si.ValueString()
		} else {
			si = nil
		}
		sb := new(string)
		if !r.Geo.Sb.IsUnknown() && !r.Geo.Sb.IsNull() {
			*sb = r.Geo.Sb.ValueString()
		} else {
			sb = nil
		}
		so := new(string)
		if !r.Geo.So.IsUnknown() && !r.Geo.So.IsNull() {
			*so = r.Geo.So.ValueString()
		} else {
			so = nil
		}
		za := new(string)
		if !r.Geo.Za.IsUnknown() && !r.Geo.Za.IsNull() {
			*za = r.Geo.Za.ValueString()
		} else {
			za = nil
		}
		gs := new(string)
		if !r.Geo.Gs.IsUnknown() && !r.Geo.Gs.IsNull() {
			*gs = r.Geo.Gs.ValueString()
		} else {
			gs = nil
		}
		es := new(string)
		if !r.Geo.Es.IsUnknown() && !r.Geo.Es.IsNull() {
			*es = r.Geo.Es.ValueString()
		} else {
			es = nil
		}
		lk := new(string)
		if !r.Geo.Lk.IsUnknown() && !r.Geo.Lk.IsNull() {
			*lk = r.Geo.Lk.ValueString()
		} else {
			lk = nil
		}
		sd := new(string)
		if !r.Geo.Sd.IsUnknown() && !r.Geo.Sd.IsNull() {
			*sd = r.Geo.Sd.ValueString()
		} else {
			sd = nil
		}
		sr := new(string)
		if !r.Geo.Sr.IsUnknown() && !r.Geo.Sr.IsNull() {
			*sr = r.Geo.Sr.ValueString()
		} else {
			sr = nil
		}
		sj := new(string)
		if !r.Geo.Sj.IsUnknown() && !r.Geo.Sj.IsNull() {
			*sj = r.Geo.Sj.ValueString()
		} else {
			sj = nil
		}
		sz := new(string)
		if !r.Geo.Sz.IsUnknown() && !r.Geo.Sz.IsNull() {
			*sz = r.Geo.Sz.ValueString()
		} else {
			sz = nil
		}
		se := new(string)
		if !r.Geo.Se.IsUnknown() && !r.Geo.Se.IsNull() {
			*se = r.Geo.Se.ValueString()
		} else {
			se = nil
		}
		ch := new(string)
		if !r.Geo.Ch.IsUnknown() && !r.Geo.Ch.IsNull() {
			*ch = r.Geo.Ch.ValueString()
		} else {
			ch = nil
		}
		sy := new(string)
		if !r.Geo.Sy.IsUnknown() && !r.Geo.Sy.IsNull() {
			*sy = r.Geo.Sy.ValueString()
		} else {
			sy = nil
		}
		tw := new(string)
		if !r.Geo.Tw.IsUnknown() && !r.Geo.Tw.IsNull() {
			*tw = r.Geo.Tw.ValueString()
		} else {
			tw = nil
		}
		tj := new(string)
		if !r.Geo.Tj.IsUnknown() && !r.Geo.Tj.IsNull() {
			*tj = r.Geo.Tj.ValueString()
		} else {
			tj = nil
		}
		tz := new(string)
		if !r.Geo.Tz.IsUnknown() && !r.Geo.Tz.IsNull() {
			*tz = r.Geo.Tz.ValueString()
		} else {
			tz = nil
		}
		th := new(string)
		if !r.Geo.Th.IsUnknown() && !r.Geo.Th.IsNull() {
			*th = r.Geo.Th.ValueString()
		} else {
			th = nil
		}
		tl := new(string)
		if !r.Geo.Tl.IsUnknown() && !r.Geo.Tl.IsNull() {
			*tl = r.Geo.Tl.ValueString()
		} else {
			tl = nil
		}
		tg := new(string)
		if !r.Geo.Tg.IsUnknown() && !r.Geo.Tg.IsNull() {
			*tg = r.Geo.Tg.ValueString()
		} else {
			tg = nil
		}
		tk := new(string)
		if !r.Geo.Tk.IsUnknown() && !r.Geo.Tk.IsNull() {
			*tk = r.Geo.Tk.ValueString()
		} else {
			tk = nil
		}
		to := new(string)
		if !r.Geo.To.IsUnknown() && !r.Geo.To.IsNull() {
			*to = r.Geo.To.ValueString()
		} else {
			to = nil
		}
		tt := new(string)
		if !r.Geo.Tt.IsUnknown() && !r.Geo.Tt.IsNull() {
			*tt = r.Geo.Tt.ValueString()
		} else {
			tt = nil
		}
		tn := new(string)
		if !r.Geo.Tn.IsUnknown() && !r.Geo.Tn.IsNull() {
			*tn = r.Geo.Tn.ValueString()
		} else {
			tn = nil
		}
		tr := new(string)
		if !r.Geo.Tr.IsUnknown() && !r.Geo.Tr.IsNull() {
			*tr = r.Geo.Tr.ValueString()
		} else {
			tr = nil
		}
		tm := new(string)
		if !r.Geo.Tm.IsUnknown() && !r.Geo.Tm.IsNull() {
			*tm = r.Geo.Tm.ValueString()
		} else {
			tm = nil
		}
		tc := new(string)
		if !r.Geo.Tc.IsUnknown() && !r.Geo.Tc.IsNull() {
			*tc = r.Geo.Tc.ValueString()
		} else {
			tc = nil
		}
		tv := new(string)
		if !r.Geo.Tv.IsUnknown() && !r.Geo.Tv.IsNull() {
			*tv = r.Geo.Tv.ValueString()
		} else {
			tv = nil
		}
		ug := new(string)
		if !r.Geo.Ug.IsUnknown() && !r.Geo.Ug.IsNull() {
			*ug = r.Geo.Ug.ValueString()
		} else {
			ug = nil
		}
		ua := new(string)
		if !r.Geo.Ua.IsUnknown() && !r.Geo.Ua.IsNull() {
			*ua = r.Geo.Ua.ValueString()
		} else {
			ua = nil
		}
		ae := new(string)
		if !r.Geo.Ae.IsUnknown() && !r.Geo.Ae.IsNull() {
			*ae = r.Geo.Ae.ValueString()
		} else {
			ae = nil
		}
		gb := new(string)
		if !r.Geo.Gb.IsUnknown() && !r.Geo.Gb.IsNull() {
			*gb = r.Geo.Gb.ValueString()
		} else {
			gb = nil
		}
		us := new(string)
		if !r.Geo.Us.IsUnknown() && !r.Geo.Us.IsNull() {
			*us = r.Geo.Us.ValueString()
		} else {
			us = nil
		}
		um := new(string)
		if !r.Geo.Um.IsUnknown() && !r.Geo.Um.IsNull() {
			*um = r.Geo.Um.ValueString()
		} else {
			um = nil
		}
		uy := new(string)
		if !r.Geo.Uy.IsUnknown() && !r.Geo.Uy.IsNull() {
			*uy = r.Geo.Uy.ValueString()
		} else {
			uy = nil
		}
		uz := new(string)
		if !r.Geo.Uz.IsUnknown() && !r.Geo.Uz.IsNull() {
			*uz = r.Geo.Uz.ValueString()
		} else {
			uz = nil
		}
		vu := new(string)
		if !r.Geo.Vu.IsUnknown() && !r.Geo.Vu.IsNull() {
			*vu = r.Geo.Vu.ValueString()
		} else {
			vu = nil
		}
		ve := new(string)
		if !r.Geo.Ve.IsUnknown() && !r.Geo.Ve.IsNull() {
			*ve = r.Geo.Ve.ValueString()
		} else {
			ve = nil
		}
		vn := new(string)
		if !r.Geo.Vn.IsUnknown() && !r.Geo.Vn.IsNull() {
			*vn = r.Geo.Vn.ValueString()
		} else {
			vn = nil
		}
		vg := new(string)
		if !r.Geo.Vg.IsUnknown() && !r.Geo.Vg.IsNull() {
			*vg = r.Geo.Vg.ValueString()
		} else {
			vg = nil
		}
		vi := new(string)
		if !r.Geo.Vi.IsUnknown() && !r.Geo.Vi.IsNull() {
			*vi = r.Geo.Vi.ValueString()
		} else {
			vi = nil
		}
		wf := new(string)
		if !r.Geo.Wf.IsUnknown() && !r.Geo.Wf.IsNull() {
			*wf = r.Geo.Wf.ValueString()
		} else {
			wf = nil
		}
		eh := new(string)
		if !r.Geo.Eh.IsUnknown() && !r.Geo.Eh.IsNull() {
			*eh = r.Geo.Eh.ValueString()
		} else {
			eh = nil
		}
		ye := new(string)
		if !r.Geo.Ye.IsUnknown() && !r.Geo.Ye.IsNull() {
			*ye = r.Geo.Ye.ValueString()
		} else {
			ye = nil
		}
		zm := new(string)
		if !r.Geo.Zm.IsUnknown() && !r.Geo.Zm.IsNull() {
			*zm = r.Geo.Zm.ValueString()
		} else {
			zm = nil
		}
		zw := new(string)
		if !r.Geo.Zw.IsUnknown() && !r.Geo.Zw.IsNull() {
			*zw = r.Geo.Zw.ValueString()
		} else {
			zw = nil
		}
		ax := new(string)
		if !r.Geo.Ax.IsUnknown() && !r.Geo.Ax.IsNull() {
			*ax = r.Geo.Ax.ValueString()
		} else {
			ax = nil
		}
		bq := new(string)
		if !r.Geo.Bq.IsUnknown() && !r.Geo.Bq.IsNull() {
			*bq = r.Geo.Bq.ValueString()
		} else {
			bq = nil
		}
		cw := new(string)
		if !r.Geo.Cw.IsUnknown() && !r.Geo.Cw.IsNull() {
			*cw = r.Geo.Cw.ValueString()
		} else {
			cw = nil
		}
		gg := new(string)
		if !r.Geo.Gg.IsUnknown() && !r.Geo.Gg.IsNull() {
			*gg = r.Geo.Gg.ValueString()
		} else {
			gg = nil
		}
		im := new(string)
		if !r.Geo.Im.IsUnknown() && !r.Geo.Im.IsNull() {
			*im = r.Geo.Im.ValueString()
		} else {
			im = nil
		}
		je := new(string)
		if !r.Geo.Je.IsUnknown() && !r.Geo.Je.IsNull() {
			*je = r.Geo.Je.ValueString()
		} else {
			je = nil
		}
		me := new(string)
		if !r.Geo.Me.IsUnknown() && !r.Geo.Me.IsNull() {
			*me = r.Geo.Me.ValueString()
		} else {
			me = nil
		}
		bl := new(string)
		if !r.Geo.Bl.IsUnknown() && !r.Geo.Bl.IsNull() {
			*bl = r.Geo.Bl.ValueString()
		} else {
			bl = nil
		}
		mf := new(string)
		if !r.Geo.Mf.IsUnknown() && !r.Geo.Mf.IsNull() {
			*mf = r.Geo.Mf.ValueString()
		} else {
			mf = nil
		}
		rs := new(string)
		if !r.Geo.Rs.IsUnknown() && !r.Geo.Rs.IsNull() {
			*rs = r.Geo.Rs.ValueString()
		} else {
			rs = nil
		}
		sx := new(string)
		if !r.Geo.Sx.IsUnknown() && !r.Geo.Sx.IsNull() {
			*sx = r.Geo.Sx.ValueString()
		} else {
			sx = nil
		}
		ss := new(string)
		if !r.Geo.Ss.IsUnknown() && !r.Geo.Ss.IsNull() {
			*ss = r.Geo.Ss.ValueString()
		} else {
			ss = nil
		}
		xk := new(string)
		if !r.Geo.Xk.IsUnknown() && !r.Geo.Xk.IsNull() {
			*xk = r.Geo.Xk.ValueString()
		} else {
			xk = nil
		}
		geo = &shared.LinkGeoTargeting{
			Af: af,
			Al: al,
			Dz: dz,
			As: as,
			Ad: ad,
			Ao: ao,
			Ai: ai,
			Aq: aq,
			Ag: ag,
			Ar: ar,
			Am: am,
			Aw: aw,
			Au: au,
			At: at,
			Az: az,
			Bs: bs,
			Bh: bh,
			Bd: bd,
			Bb: bb,
			By: by,
			Be: be,
			Bz: bz,
			Bj: bj,
			Bm: bm,
			Bt: bt,
			Bo: bo,
			Ba: ba,
			Bw: bw,
			Bv: bv,
			Br: br,
			Io: io,
			Bn: bn,
			Bg: bg,
			Bf: bf,
			Bi: bi,
			Kh: kh,
			Cm: cm,
			Ca: ca,
			Cv: cv,
			Ky: ky,
			Cf: cf,
			Td: td,
			Cl: cl,
			Cn: cn,
			Cx: cx,
			Cc: cc,
			Co: co,
			Km: km,
			Cg: cg,
			Cd: cd,
			Ck: ck,
			Cr: cr,
			Ci: ci,
			Hr: hr,
			Cu: cu,
			Cy: cy,
			Cz: cz,
			Dk: dk,
			Dj: dj,
			Dm: dm,
			Do: do,
			Ec: ec,
			Eg: eg,
			Sv: sv,
			Gq: gq,
			Er: er,
			Ee: ee,
			Et: et,
			Fk: fk,
			Fo: fo,
			Fj: fj,
			Fi: fi,
			Fr: fr,
			Gf: gf,
			Pf: pf,
			Tf: tf,
			Ga: ga,
			Gm: gm,
			Ge: ge,
			De: de,
			Gh: gh,
			Gi: gi,
			Gr: gr,
			Gl: gl,
			Gd: gd,
			Gp: gp,
			Gu: gu,
			Gt: gt,
			Gn: gn,
			Gw: gw,
			Gy: gy,
			Ht: ht,
			Hm: hm,
			Va: va,
			Hn: hn,
			Hk: hk,
			Hu: hu,
			Is: is,
			In: in,
			ID: id,
			Ir: ir,
			Iq: iq,
			Ie: ie,
			Il: il,
			It: it,
			Jm: jm,
			Jp: jp,
			Jo: jo,
			Kz: kz,
			Ke: ke,
			Ki: ki,
			Kp: kp,
			Kr: kr,
			Kw: kw,
			Kg: kg,
			La: la,
			Lv: lv,
			Lb: lb,
			Ls: ls,
			Lr: lr,
			Ly: ly,
			Li: li,
			Lt: lt,
			Lu: lu,
			Mo: mo,
			Mg: mg,
			Mw: mw,
			My: my,
			Mv: mv,
			Ml: ml,
			Mt: mt,
			Mh: mh,
			Mq: mq,
			Mr: mr,
			Mu: mu,
			Yt: yt,
			Mx: mx,
			Fm: fm,
			Md: md,
			Mc: mc,
			Mn: mn,
			Ms: ms,
			Ma: ma,
			Mz: mz,
			Mm: mm,
			Na: na,
			Nr: nr,
			Np: np,
			Nl: nl,
			Nc: nc,
			Nz: nz,
			Ni: ni,
			Ne: ne,
			Ng: ng,
			Nu: nu,
			Nf: nf,
			Mk: mk,
			Mp: mp,
			No: no,
			Om: om,
			Pk: pk,
			Pw: pw,
			Ps: ps,
			Pa: pa,
			Pg: pg,
			Py: py,
			Pe: pe,
			Ph: ph,
			Pn: pn,
			Pl: pl,
			Pt: pt,
			Pr: pr,
			Qa: qa,
			Re: re,
			Ro: ro,
			Ru: ru,
			Rw: rw,
			Sh: sh,
			Kn: kn,
			Lc: lc,
			Pm: pm,
			Vc: vc,
			Ws: ws,
			Sm: sm,
			St: st,
			Sa: sa,
			Sn: sn,
			Sc: sc,
			Sl: sl,
			Sg: sg,
			Sk: sk,
			Si: si,
			Sb: sb,
			So: so,
			Za: za,
			Gs: gs,
			Es: es,
			Lk: lk,
			Sd: sd,
			Sr: sr,
			Sj: sj,
			Sz: sz,
			Se: se,
			Ch: ch,
			Sy: sy,
			Tw: tw,
			Tj: tj,
			Tz: tz,
			Th: th,
			Tl: tl,
			Tg: tg,
			Tk: tk,
			To: to,
			Tt: tt,
			Tn: tn,
			Tr: tr,
			Tm: tm,
			Tc: tc,
			Tv: tv,
			Ug: ug,
			Ua: ua,
			Ae: ae,
			Gb: gb,
			Us: us,
			Um: um,
			Uy: uy,
			Uz: uz,
			Vu: vu,
			Ve: ve,
			Vn: vn,
			Vg: vg,
			Vi: vi,
			Wf: wf,
			Eh: eh,
			Ye: ye,
			Zm: zm,
			Zw: zw,
			Ax: ax,
			Bq: bq,
			Cw: cw,
			Gg: gg,
			Im: im,
			Je: je,
			Me: me,
			Bl: bl,
			Mf: mf,
			Rs: rs,
			Sx: sx,
			Ss: ss,
			Xk: xk,
		}
	}
	doIndex := new(bool)
	if !r.DoIndex.IsUnknown() && !r.DoIndex.IsNull() {
		*doIndex = r.DoIndex.ValueBool()
	} else {
		doIndex = nil
	}
	utmSource := new(string)
	if !r.UtmSource.IsUnknown() && !r.UtmSource.IsNull() {
		*utmSource = r.UtmSource.ValueString()
	} else {
		utmSource = nil
	}
	utmMedium := new(string)
	if !r.UtmMedium.IsUnknown() && !r.UtmMedium.IsNull() {
		*utmMedium = r.UtmMedium.ValueString()
	} else {
		utmMedium = nil
	}
	utmCampaign := new(string)
	if !r.UtmCampaign.IsUnknown() && !r.UtmCampaign.IsNull() {
		*utmCampaign = r.UtmCampaign.ValueString()
	} else {
		utmCampaign = nil
	}
	utmTerm := new(string)
	if !r.UtmTerm.IsUnknown() && !r.UtmTerm.IsNull() {
		*utmTerm = r.UtmTerm.ValueString()
	} else {
		utmTerm = nil
	}
	utmContent := new(string)
	if !r.UtmContent.IsUnknown() && !r.UtmContent.IsNull() {
		*utmContent = r.UtmContent.ValueString()
	} else {
		utmContent = nil
	}
	ref := new(string)
	if !r.Ref.IsUnknown() && !r.Ref.IsNull() {
		*ref = r.Ref.ValueString()
	} else {
		ref = nil
	}
	var webhookIds []string
	if r.WebhookIds != nil {
		webhookIds = make([]string, 0, len(r.WebhookIds))
		for _, webhookIdsItem := range r.WebhookIds {
			webhookIds = append(webhookIds, webhookIdsItem.ValueString())
		}
	}
	var testVariants []operations.UpdateLinkTestVariant
	if r.TestVariants != nil {
		testVariants = make([]operations.UpdateLinkTestVariant, 0, len(r.TestVariants))
		for _, testVariantsItem := range r.TestVariants {
			var url1 string
			url1 = testVariantsItem.URL.ValueString()

			var percentage float64
			percentage = testVariantsItem.Percentage.ValueFloat64()

			testVariants = append(testVariants, operations.UpdateLinkTestVariant{
				URL:        url1,
				Percentage: percentage,
			})
		}
	}
	testStartedAt := new(string)
	if !r.TestStartedAt.IsUnknown() && !r.TestStartedAt.IsNull() {
		*testStartedAt = r.TestStartedAt.ValueString()
	} else {
		testStartedAt = nil
	}
	testCompletedAt := new(string)
	if !r.TestCompletedAt.IsUnknown() && !r.TestCompletedAt.IsNull() {
		*testCompletedAt = r.TestCompletedAt.ValueString()
	} else {
		testCompletedAt = nil
	}
	out := operations.UpdateLinkRequestBody{
		URL:             url,
		Domain:          domain,
		Key:             key,
		ExternalID:      externalID,
		TenantID:        tenantID,
		ProgramID:       programID,
		PartnerID:       partnerID,
		TrackConversion: trackConversion,
		Archived:        archived,
		PublicStats:     publicStats,
		TagID:           tagID,
		TagIds:          tagIds,
		TagNames:        tagNames,
		FolderID:        folderID,
		Comments:        comments,
		ExpiresAt:       expiresAt,
		ExpiredURL:      expiredURL,
		Password:        password,
		Proxy:           proxy,
		Title:           title,
		Description:     description,
		Image:           image,
		Video:           video,
		Rewrite:         rewrite,
		Ios:             ios,
		Android:         android,
		Geo:             geo,
		DoIndex:         doIndex,
		UtmSource:       utmSource,
		UtmMedium:       utmMedium,
		UtmCampaign:     utmCampaign,
		UtmTerm:         utmTerm,
		UtmContent:      utmContent,
		Ref:             ref,
		WebhookIds:      webhookIds,
		TestVariants:    testVariants,
		TestStartedAt:   testStartedAt,
		TestCompletedAt: testCompletedAt,
	}

	return &out, diags
}

func (r *LinkResourceModel) ToOperationsUpdateLinkRequest(ctx context.Context) (*operations.UpdateLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	requestBody, requestBodyDiags := r.ToOperationsUpdateLinkRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateLinkRequest{
		ID:          id,
		RequestBody: requestBody,
	}

	return &out, diags
}

func (r *LinkResourceModel) ToOperationsGetLinkInfoRequest(ctx context.Context) (*operations.GetLinkInfoRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	domain := new(string)
	if !r.Domain.IsUnknown() && !r.Domain.IsNull() {
		*domain = r.Domain.ValueString()
	} else {
		domain = nil
	}
	key := new(string)
	if !r.Key.IsUnknown() && !r.Key.IsNull() {
		*key = r.Key.ValueString()
	} else {
		key = nil
	}
	var id string
	id = r.ID.ValueString()

	externalID := new(string)
	if !r.ExternalID.IsUnknown() && !r.ExternalID.IsNull() {
		*externalID = r.ExternalID.ValueString()
	} else {
		externalID = nil
	}
	out := operations.GetLinkInfoRequest{
		Domain:     domain,
		Key:        key,
		ID:         id,
		ExternalID: externalID,
	}

	return &out, diags
}

func (r *LinkResourceModel) ToOperationsDeleteLinkRequest(ctx context.Context) (*operations.DeleteLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteLinkRequest{
		ID: id,
	}

	return &out, diags
}

func (r *LinkResourceModel) RefreshFromSharedLinkSchema(ctx context.Context, resp *shared.LinkSchema) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Android = types.StringPointerValue(resp.Android)
		r.Archived = types.BoolPointerValue(resp.Archived)
		r.Clicks = types.Float64PointerValue(resp.Clicks)
		r.Comments = types.StringPointerValue(resp.Comments)
		r.CreatedAt = types.StringValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.DoIndex = types.BoolPointerValue(resp.DoIndex)
		r.Domain = types.StringValue(resp.Domain)
		r.ExpiredURL = types.StringPointerValue(resp.ExpiredURL)
		r.ExpiresAt = types.StringPointerValue(resp.ExpiresAt)
		r.ExternalID = types.StringPointerValue(resp.ExternalID)
		r.FolderID = types.StringPointerValue(resp.FolderID)
		if resp.Geo == nil {
			r.Geo = nil
		} else {
			r.Geo = &tfTypes.LinkGeoTargeting{}
			r.Geo.Ad = types.StringPointerValue(resp.Geo.Ad)
			r.Geo.Ae = types.StringPointerValue(resp.Geo.Ae)
			r.Geo.Af = types.StringPointerValue(resp.Geo.Af)
			r.Geo.Ag = types.StringPointerValue(resp.Geo.Ag)
			r.Geo.Ai = types.StringPointerValue(resp.Geo.Ai)
			r.Geo.Al = types.StringPointerValue(resp.Geo.Al)
			r.Geo.Am = types.StringPointerValue(resp.Geo.Am)
			r.Geo.Ao = types.StringPointerValue(resp.Geo.Ao)
			r.Geo.Aq = types.StringPointerValue(resp.Geo.Aq)
			r.Geo.Ar = types.StringPointerValue(resp.Geo.Ar)
			r.Geo.As = types.StringPointerValue(resp.Geo.As)
			r.Geo.At = types.StringPointerValue(resp.Geo.At)
			r.Geo.Au = types.StringPointerValue(resp.Geo.Au)
			r.Geo.Aw = types.StringPointerValue(resp.Geo.Aw)
			r.Geo.Ax = types.StringPointerValue(resp.Geo.Ax)
			r.Geo.Az = types.StringPointerValue(resp.Geo.Az)
			r.Geo.Ba = types.StringPointerValue(resp.Geo.Ba)
			r.Geo.Bb = types.StringPointerValue(resp.Geo.Bb)
			r.Geo.Bd = types.StringPointerValue(resp.Geo.Bd)
			r.Geo.Be = types.StringPointerValue(resp.Geo.Be)
			r.Geo.Bf = types.StringPointerValue(resp.Geo.Bf)
			r.Geo.Bg = types.StringPointerValue(resp.Geo.Bg)
			r.Geo.Bh = types.StringPointerValue(resp.Geo.Bh)
			r.Geo.Bi = types.StringPointerValue(resp.Geo.Bi)
			r.Geo.Bj = types.StringPointerValue(resp.Geo.Bj)
			r.Geo.Bl = types.StringPointerValue(resp.Geo.Bl)
			r.Geo.Bm = types.StringPointerValue(resp.Geo.Bm)
			r.Geo.Bn = types.StringPointerValue(resp.Geo.Bn)
			r.Geo.Bo = types.StringPointerValue(resp.Geo.Bo)
			r.Geo.Bq = types.StringPointerValue(resp.Geo.Bq)
			r.Geo.Br = types.StringPointerValue(resp.Geo.Br)
			r.Geo.Bs = types.StringPointerValue(resp.Geo.Bs)
			r.Geo.Bt = types.StringPointerValue(resp.Geo.Bt)
			r.Geo.Bv = types.StringPointerValue(resp.Geo.Bv)
			r.Geo.Bw = types.StringPointerValue(resp.Geo.Bw)
			r.Geo.By = types.StringPointerValue(resp.Geo.By)
			r.Geo.Bz = types.StringPointerValue(resp.Geo.Bz)
			r.Geo.Ca = types.StringPointerValue(resp.Geo.Ca)
			r.Geo.Cc = types.StringPointerValue(resp.Geo.Cc)
			r.Geo.Cd = types.StringPointerValue(resp.Geo.Cd)
			r.Geo.Cf = types.StringPointerValue(resp.Geo.Cf)
			r.Geo.Cg = types.StringPointerValue(resp.Geo.Cg)
			r.Geo.Ch = types.StringPointerValue(resp.Geo.Ch)
			r.Geo.Ci = types.StringPointerValue(resp.Geo.Ci)
			r.Geo.Ck = types.StringPointerValue(resp.Geo.Ck)
			r.Geo.Cl = types.StringPointerValue(resp.Geo.Cl)
			r.Geo.Cm = types.StringPointerValue(resp.Geo.Cm)
			r.Geo.Cn = types.StringPointerValue(resp.Geo.Cn)
			r.Geo.Co = types.StringPointerValue(resp.Geo.Co)
			r.Geo.Cr = types.StringPointerValue(resp.Geo.Cr)
			r.Geo.Cu = types.StringPointerValue(resp.Geo.Cu)
			r.Geo.Cv = types.StringPointerValue(resp.Geo.Cv)
			r.Geo.Cw = types.StringPointerValue(resp.Geo.Cw)
			r.Geo.Cx = types.StringPointerValue(resp.Geo.Cx)
			r.Geo.Cy = types.StringPointerValue(resp.Geo.Cy)
			r.Geo.Cz = types.StringPointerValue(resp.Geo.Cz)
			r.Geo.De = types.StringPointerValue(resp.Geo.De)
			r.Geo.Dj = types.StringPointerValue(resp.Geo.Dj)
			r.Geo.Dk = types.StringPointerValue(resp.Geo.Dk)
			r.Geo.Dm = types.StringPointerValue(resp.Geo.Dm)
			r.Geo.Do = types.StringPointerValue(resp.Geo.Do)
			r.Geo.Dz = types.StringPointerValue(resp.Geo.Dz)
			r.Geo.Ec = types.StringPointerValue(resp.Geo.Ec)
			r.Geo.Ee = types.StringPointerValue(resp.Geo.Ee)
			r.Geo.Eg = types.StringPointerValue(resp.Geo.Eg)
			r.Geo.Eh = types.StringPointerValue(resp.Geo.Eh)
			r.Geo.Er = types.StringPointerValue(resp.Geo.Er)
			r.Geo.Es = types.StringPointerValue(resp.Geo.Es)
			r.Geo.Et = types.StringPointerValue(resp.Geo.Et)
			r.Geo.Fi = types.StringPointerValue(resp.Geo.Fi)
			r.Geo.Fj = types.StringPointerValue(resp.Geo.Fj)
			r.Geo.Fk = types.StringPointerValue(resp.Geo.Fk)
			r.Geo.Fm = types.StringPointerValue(resp.Geo.Fm)
			r.Geo.Fo = types.StringPointerValue(resp.Geo.Fo)
			r.Geo.Fr = types.StringPointerValue(resp.Geo.Fr)
			r.Geo.Ga = types.StringPointerValue(resp.Geo.Ga)
			r.Geo.Gb = types.StringPointerValue(resp.Geo.Gb)
			r.Geo.Gd = types.StringPointerValue(resp.Geo.Gd)
			r.Geo.Ge = types.StringPointerValue(resp.Geo.Ge)
			r.Geo.Gf = types.StringPointerValue(resp.Geo.Gf)
			r.Geo.Gg = types.StringPointerValue(resp.Geo.Gg)
			r.Geo.Gh = types.StringPointerValue(resp.Geo.Gh)
			r.Geo.Gi = types.StringPointerValue(resp.Geo.Gi)
			r.Geo.Gl = types.StringPointerValue(resp.Geo.Gl)
			r.Geo.Gm = types.StringPointerValue(resp.Geo.Gm)
			r.Geo.Gn = types.StringPointerValue(resp.Geo.Gn)
			r.Geo.Gp = types.StringPointerValue(resp.Geo.Gp)
			r.Geo.Gq = types.StringPointerValue(resp.Geo.Gq)
			r.Geo.Gr = types.StringPointerValue(resp.Geo.Gr)
			r.Geo.Gs = types.StringPointerValue(resp.Geo.Gs)
			r.Geo.Gt = types.StringPointerValue(resp.Geo.Gt)
			r.Geo.Gu = types.StringPointerValue(resp.Geo.Gu)
			r.Geo.Gw = types.StringPointerValue(resp.Geo.Gw)
			r.Geo.Gy = types.StringPointerValue(resp.Geo.Gy)
			r.Geo.Hk = types.StringPointerValue(resp.Geo.Hk)
			r.Geo.Hm = types.StringPointerValue(resp.Geo.Hm)
			r.Geo.Hn = types.StringPointerValue(resp.Geo.Hn)
			r.Geo.Hr = types.StringPointerValue(resp.Geo.Hr)
			r.Geo.Ht = types.StringPointerValue(resp.Geo.Ht)
			r.Geo.Hu = types.StringPointerValue(resp.Geo.Hu)
			r.Geo.ID = types.StringPointerValue(resp.Geo.ID)
			r.Geo.Ie = types.StringPointerValue(resp.Geo.Ie)
			r.Geo.Il = types.StringPointerValue(resp.Geo.Il)
			r.Geo.Im = types.StringPointerValue(resp.Geo.Im)
			r.Geo.In = types.StringPointerValue(resp.Geo.In)
			r.Geo.Io = types.StringPointerValue(resp.Geo.Io)
			r.Geo.Iq = types.StringPointerValue(resp.Geo.Iq)
			r.Geo.Ir = types.StringPointerValue(resp.Geo.Ir)
			r.Geo.Is = types.StringPointerValue(resp.Geo.Is)
			r.Geo.It = types.StringPointerValue(resp.Geo.It)
			r.Geo.Je = types.StringPointerValue(resp.Geo.Je)
			r.Geo.Jm = types.StringPointerValue(resp.Geo.Jm)
			r.Geo.Jo = types.StringPointerValue(resp.Geo.Jo)
			r.Geo.Jp = types.StringPointerValue(resp.Geo.Jp)
			r.Geo.Ke = types.StringPointerValue(resp.Geo.Ke)
			r.Geo.Kg = types.StringPointerValue(resp.Geo.Kg)
			r.Geo.Kh = types.StringPointerValue(resp.Geo.Kh)
			r.Geo.Ki = types.StringPointerValue(resp.Geo.Ki)
			r.Geo.Km = types.StringPointerValue(resp.Geo.Km)
			r.Geo.Kn = types.StringPointerValue(resp.Geo.Kn)
			r.Geo.Kp = types.StringPointerValue(resp.Geo.Kp)
			r.Geo.Kr = types.StringPointerValue(resp.Geo.Kr)
			r.Geo.Kw = types.StringPointerValue(resp.Geo.Kw)
			r.Geo.Ky = types.StringPointerValue(resp.Geo.Ky)
			r.Geo.Kz = types.StringPointerValue(resp.Geo.Kz)
			r.Geo.La = types.StringPointerValue(resp.Geo.La)
			r.Geo.Lb = types.StringPointerValue(resp.Geo.Lb)
			r.Geo.Lc = types.StringPointerValue(resp.Geo.Lc)
			r.Geo.Li = types.StringPointerValue(resp.Geo.Li)
			r.Geo.Lk = types.StringPointerValue(resp.Geo.Lk)
			r.Geo.Lr = types.StringPointerValue(resp.Geo.Lr)
			r.Geo.Ls = types.StringPointerValue(resp.Geo.Ls)
			r.Geo.Lt = types.StringPointerValue(resp.Geo.Lt)
			r.Geo.Lu = types.StringPointerValue(resp.Geo.Lu)
			r.Geo.Lv = types.StringPointerValue(resp.Geo.Lv)
			r.Geo.Ly = types.StringPointerValue(resp.Geo.Ly)
			r.Geo.Ma = types.StringPointerValue(resp.Geo.Ma)
			r.Geo.Mc = types.StringPointerValue(resp.Geo.Mc)
			r.Geo.Md = types.StringPointerValue(resp.Geo.Md)
			r.Geo.Me = types.StringPointerValue(resp.Geo.Me)
			r.Geo.Mf = types.StringPointerValue(resp.Geo.Mf)
			r.Geo.Mg = types.StringPointerValue(resp.Geo.Mg)
			r.Geo.Mh = types.StringPointerValue(resp.Geo.Mh)
			r.Geo.Mk = types.StringPointerValue(resp.Geo.Mk)
			r.Geo.Ml = types.StringPointerValue(resp.Geo.Ml)
			r.Geo.Mm = types.StringPointerValue(resp.Geo.Mm)
			r.Geo.Mn = types.StringPointerValue(resp.Geo.Mn)
			r.Geo.Mo = types.StringPointerValue(resp.Geo.Mo)
			r.Geo.Mp = types.StringPointerValue(resp.Geo.Mp)
			r.Geo.Mq = types.StringPointerValue(resp.Geo.Mq)
			r.Geo.Mr = types.StringPointerValue(resp.Geo.Mr)
			r.Geo.Ms = types.StringPointerValue(resp.Geo.Ms)
			r.Geo.Mt = types.StringPointerValue(resp.Geo.Mt)
			r.Geo.Mu = types.StringPointerValue(resp.Geo.Mu)
			r.Geo.Mv = types.StringPointerValue(resp.Geo.Mv)
			r.Geo.Mw = types.StringPointerValue(resp.Geo.Mw)
			r.Geo.Mx = types.StringPointerValue(resp.Geo.Mx)
			r.Geo.My = types.StringPointerValue(resp.Geo.My)
			r.Geo.Mz = types.StringPointerValue(resp.Geo.Mz)
			r.Geo.Na = types.StringPointerValue(resp.Geo.Na)
			r.Geo.Nc = types.StringPointerValue(resp.Geo.Nc)
			r.Geo.Ne = types.StringPointerValue(resp.Geo.Ne)
			r.Geo.Nf = types.StringPointerValue(resp.Geo.Nf)
			r.Geo.Ng = types.StringPointerValue(resp.Geo.Ng)
			r.Geo.Ni = types.StringPointerValue(resp.Geo.Ni)
			r.Geo.Nl = types.StringPointerValue(resp.Geo.Nl)
			r.Geo.No = types.StringPointerValue(resp.Geo.No)
			r.Geo.Np = types.StringPointerValue(resp.Geo.Np)
			r.Geo.Nr = types.StringPointerValue(resp.Geo.Nr)
			r.Geo.Nu = types.StringPointerValue(resp.Geo.Nu)
			r.Geo.Nz = types.StringPointerValue(resp.Geo.Nz)
			r.Geo.Om = types.StringPointerValue(resp.Geo.Om)
			r.Geo.Pa = types.StringPointerValue(resp.Geo.Pa)
			r.Geo.Pe = types.StringPointerValue(resp.Geo.Pe)
			r.Geo.Pf = types.StringPointerValue(resp.Geo.Pf)
			r.Geo.Pg = types.StringPointerValue(resp.Geo.Pg)
			r.Geo.Ph = types.StringPointerValue(resp.Geo.Ph)
			r.Geo.Pk = types.StringPointerValue(resp.Geo.Pk)
			r.Geo.Pl = types.StringPointerValue(resp.Geo.Pl)
			r.Geo.Pm = types.StringPointerValue(resp.Geo.Pm)
			r.Geo.Pn = types.StringPointerValue(resp.Geo.Pn)
			r.Geo.Pr = types.StringPointerValue(resp.Geo.Pr)
			r.Geo.Ps = types.StringPointerValue(resp.Geo.Ps)
			r.Geo.Pt = types.StringPointerValue(resp.Geo.Pt)
			r.Geo.Pw = types.StringPointerValue(resp.Geo.Pw)
			r.Geo.Py = types.StringPointerValue(resp.Geo.Py)
			r.Geo.Qa = types.StringPointerValue(resp.Geo.Qa)
			r.Geo.Re = types.StringPointerValue(resp.Geo.Re)
			r.Geo.Ro = types.StringPointerValue(resp.Geo.Ro)
			r.Geo.Rs = types.StringPointerValue(resp.Geo.Rs)
			r.Geo.Ru = types.StringPointerValue(resp.Geo.Ru)
			r.Geo.Rw = types.StringPointerValue(resp.Geo.Rw)
			r.Geo.Sa = types.StringPointerValue(resp.Geo.Sa)
			r.Geo.Sb = types.StringPointerValue(resp.Geo.Sb)
			r.Geo.Sc = types.StringPointerValue(resp.Geo.Sc)
			r.Geo.Sd = types.StringPointerValue(resp.Geo.Sd)
			r.Geo.Se = types.StringPointerValue(resp.Geo.Se)
			r.Geo.Sg = types.StringPointerValue(resp.Geo.Sg)
			r.Geo.Sh = types.StringPointerValue(resp.Geo.Sh)
			r.Geo.Si = types.StringPointerValue(resp.Geo.Si)
			r.Geo.Sj = types.StringPointerValue(resp.Geo.Sj)
			r.Geo.Sk = types.StringPointerValue(resp.Geo.Sk)
			r.Geo.Sl = types.StringPointerValue(resp.Geo.Sl)
			r.Geo.Sm = types.StringPointerValue(resp.Geo.Sm)
			r.Geo.Sn = types.StringPointerValue(resp.Geo.Sn)
			r.Geo.So = types.StringPointerValue(resp.Geo.So)
			r.Geo.Sr = types.StringPointerValue(resp.Geo.Sr)
			r.Geo.Ss = types.StringPointerValue(resp.Geo.Ss)
			r.Geo.St = types.StringPointerValue(resp.Geo.St)
			r.Geo.Sv = types.StringPointerValue(resp.Geo.Sv)
			r.Geo.Sx = types.StringPointerValue(resp.Geo.Sx)
			r.Geo.Sy = types.StringPointerValue(resp.Geo.Sy)
			r.Geo.Sz = types.StringPointerValue(resp.Geo.Sz)
			r.Geo.Tc = types.StringPointerValue(resp.Geo.Tc)
			r.Geo.Td = types.StringPointerValue(resp.Geo.Td)
			r.Geo.Tf = types.StringPointerValue(resp.Geo.Tf)
			r.Geo.Tg = types.StringPointerValue(resp.Geo.Tg)
			r.Geo.Th = types.StringPointerValue(resp.Geo.Th)
			r.Geo.Tj = types.StringPointerValue(resp.Geo.Tj)
			r.Geo.Tk = types.StringPointerValue(resp.Geo.Tk)
			r.Geo.Tl = types.StringPointerValue(resp.Geo.Tl)
			r.Geo.Tm = types.StringPointerValue(resp.Geo.Tm)
			r.Geo.Tn = types.StringPointerValue(resp.Geo.Tn)
			r.Geo.To = types.StringPointerValue(resp.Geo.To)
			r.Geo.Tr = types.StringPointerValue(resp.Geo.Tr)
			r.Geo.Tt = types.StringPointerValue(resp.Geo.Tt)
			r.Geo.Tv = types.StringPointerValue(resp.Geo.Tv)
			r.Geo.Tw = types.StringPointerValue(resp.Geo.Tw)
			r.Geo.Tz = types.StringPointerValue(resp.Geo.Tz)
			r.Geo.Ua = types.StringPointerValue(resp.Geo.Ua)
			r.Geo.Ug = types.StringPointerValue(resp.Geo.Ug)
			r.Geo.Um = types.StringPointerValue(resp.Geo.Um)
			r.Geo.Us = types.StringPointerValue(resp.Geo.Us)
			r.Geo.Uy = types.StringPointerValue(resp.Geo.Uy)
			r.Geo.Uz = types.StringPointerValue(resp.Geo.Uz)
			r.Geo.Va = types.StringPointerValue(resp.Geo.Va)
			r.Geo.Vc = types.StringPointerValue(resp.Geo.Vc)
			r.Geo.Ve = types.StringPointerValue(resp.Geo.Ve)
			r.Geo.Vg = types.StringPointerValue(resp.Geo.Vg)
			r.Geo.Vi = types.StringPointerValue(resp.Geo.Vi)
			r.Geo.Vn = types.StringPointerValue(resp.Geo.Vn)
			r.Geo.Vu = types.StringPointerValue(resp.Geo.Vu)
			r.Geo.Wf = types.StringPointerValue(resp.Geo.Wf)
			r.Geo.Ws = types.StringPointerValue(resp.Geo.Ws)
			r.Geo.Xk = types.StringPointerValue(resp.Geo.Xk)
			r.Geo.Ye = types.StringPointerValue(resp.Geo.Ye)
			r.Geo.Yt = types.StringPointerValue(resp.Geo.Yt)
			r.Geo.Za = types.StringPointerValue(resp.Geo.Za)
			r.Geo.Zm = types.StringPointerValue(resp.Geo.Zm)
			r.Geo.Zw = types.StringPointerValue(resp.Geo.Zw)
		}
		r.ID = types.StringValue(resp.ID)
		r.Image = types.StringPointerValue(resp.Image)
		r.Ios = types.StringPointerValue(resp.Ios)
		r.Key = types.StringValue(resp.Key)
		r.LastClicked = types.StringPointerValue(resp.LastClicked)
		r.Leads = types.Float64PointerValue(resp.Leads)
		r.PartnerID = types.StringPointerValue(resp.PartnerID)
		r.Password = types.StringPointerValue(resp.Password)
		r.ProgramID = types.StringPointerValue(resp.ProgramID)
		r.ProjectID = types.StringValue(resp.ProjectID)
		r.Proxy = types.BoolPointerValue(resp.Proxy)
		r.PublicStats = types.BoolPointerValue(resp.PublicStats)
		r.QrCode = types.StringValue(resp.QrCode)
		r.Rewrite = types.BoolPointerValue(resp.Rewrite)
		r.SaleAmount = types.Float64PointerValue(resp.SaleAmount)
		r.Sales = types.Float64PointerValue(resp.Sales)
		r.ShortLink = types.StringValue(resp.ShortLink)
		r.TagID = types.StringPointerValue(resp.TagID)
		if resp.Tags != nil {
			r.Tags = []tfTypes.TagSchema{}
			if len(r.Tags) > len(resp.Tags) {
				r.Tags = r.Tags[:len(resp.Tags)]
			}
			for tagsCount, tagsItem := range resp.Tags {
				var tags tfTypes.TagSchema
				tags.Color = types.StringValue(string(tagsItem.Color))
				tags.ID = types.StringValue(tagsItem.ID)
				tags.Name = types.StringValue(tagsItem.Name)
				if tagsCount+1 > len(r.Tags) {
					r.Tags = append(r.Tags, tags)
				} else {
					r.Tags[tagsCount].Color = tags.Color
					r.Tags[tagsCount].ID = tags.ID
					r.Tags[tagsCount].Name = tags.Name
				}
			}
		}
		r.TenantID = types.StringPointerValue(resp.TenantID)
		r.TestCompletedAt = types.StringPointerValue(resp.TestCompletedAt)
		r.TestStartedAt = types.StringPointerValue(resp.TestStartedAt)
		if resp.TestVariants != nil {
			r.TestVariants = []tfTypes.TestVariant{}
			if len(r.TestVariants) > len(resp.TestVariants) {
				r.TestVariants = r.TestVariants[:len(resp.TestVariants)]
			}
			for testVariantsCount, testVariantsItem := range resp.TestVariants {
				var testVariants tfTypes.TestVariant
				testVariants.Percentage = types.Float64Value(testVariantsItem.Percentage)
				testVariants.URL = types.StringValue(testVariantsItem.URL)
				if testVariantsCount+1 > len(r.TestVariants) {
					r.TestVariants = append(r.TestVariants, testVariants)
				} else {
					r.TestVariants[testVariantsCount].Percentage = testVariants.Percentage
					r.TestVariants[testVariantsCount].URL = testVariants.URL
				}
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.TrackConversion = types.BoolPointerValue(resp.TrackConversion)
		r.UpdatedAt = types.StringValue(resp.UpdatedAt)
		r.URL = types.StringValue(resp.URL)
		r.UserID = types.StringPointerValue(resp.UserID)
		r.UtmCampaign = types.StringPointerValue(resp.UtmCampaign)
		r.UtmContent = types.StringPointerValue(resp.UtmContent)
		r.UtmMedium = types.StringPointerValue(resp.UtmMedium)
		r.UtmSource = types.StringPointerValue(resp.UtmSource)
		r.UtmTerm = types.StringPointerValue(resp.UtmTerm)
		r.Video = types.StringPointerValue(resp.Video)
		if resp.WebhookIds != nil {
			r.WebhookIds = make([]types.String, 0, len(resp.WebhookIds))
			for _, v := range resp.WebhookIds {
				r.WebhookIds = append(r.WebhookIds, types.StringValue(v))
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
