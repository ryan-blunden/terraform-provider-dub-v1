// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
)

func (r *TagResourceModel) ToOperationsCreateTagRequest(ctx context.Context) (*operations.CreateTagRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	color := new(operations.CreateTagColor)
	if !r.Color.IsUnknown() && !r.Color.IsNull() {
		*color = operations.CreateTagColor(r.Color.ValueString())
	} else {
		color = nil
	}
	tag := new(string)
	if !r.Tag.IsUnknown() && !r.Tag.IsNull() {
		*tag = r.Tag.ValueString()
	} else {
		tag = nil
	}
	out := operations.CreateTagRequest{
		Name:  name,
		Color: color,
		Tag:   tag,
	}

	return &out, diags
}

func (r *TagResourceModel) ToOperationsUpdateTagRequestBody(ctx context.Context) (*operations.UpdateTagRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	color := new(operations.UpdateTagColor)
	if !r.Color.IsUnknown() && !r.Color.IsNull() {
		*color = operations.UpdateTagColor(r.Color.ValueString())
	} else {
		color = nil
	}
	tag := new(string)
	if !r.Tag.IsUnknown() && !r.Tag.IsNull() {
		*tag = r.Tag.ValueString()
	} else {
		tag = nil
	}
	out := operations.UpdateTagRequestBody{
		Name:  name,
		Color: color,
		Tag:   tag,
	}

	return &out, diags
}

func (r *TagResourceModel) ToOperationsUpdateTagRequest(ctx context.Context) (*operations.UpdateTagRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	requestBody, requestBodyDiags := r.ToOperationsUpdateTagRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTagRequest{
		ID:          id,
		RequestBody: requestBody,
	}

	return &out, diags
}

func (r *TagResourceModel) ToOperationsGetTagsRequest(ctx context.Context) (*operations.GetTagsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := operations.GetTagsRequest{}

	return &out, diags
}

func (r *TagResourceModel) ToOperationsDeleteTagRequest(ctx context.Context) (*operations.DeleteTagRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteTagRequest{
		ID: id,
	}

	return &out, diags
}

func (r *TagResourceModel) RefreshFromSharedTagSchema(ctx context.Context, resp *shared.TagSchema) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Color = types.StringValue(string(resp.Color))
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
	}

	return diags
}
