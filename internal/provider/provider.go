// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk"
	"github.com/speakeasy/terraform-provider-dub/internal/sdk/models/shared"
	"net/http"
	"os"
)

var _ provider.Provider = (*DubProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*DubProvider)(nil)

type DubProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// DubProviderModel describes the provider data model.
type DubProviderModel struct {
	ServerURL types.String `tfsdk:"server_url"`
	Token     types.String `tfsdk:"token"`
}

func (p *DubProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "dub"
	resp.Version = p.version
}

func (p *DubProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://api.dub.co)`,
				Optional:    true,
			},
			"token": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
		},
		MarkdownDescription: `Dub API: Dub is link management infrastructure for companies to create marketing campaigns, link sharing features, and referral programs.`,
	}
}

func (p *DubProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data DubProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://api.dub.co"
	}

	security := shared.Security{}

	if !data.Token.IsUnknown() {
		security.Token = data.Token.ValueString()
	}

	if tokenEnvVar := os.Getenv("DUB_API_KEY"); security.Token == "" && tokenEnvVar != "" {
		security.Token = tokenEnvVar
	}

	if security.Token == "" {
		resp.Diagnostics.AddError(
			"Missing Provider Security Configuration",
			"Either the environment variable DUB_API_KEY or provider configuration token attribute must be configured.",
		)
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}

	client := sdk.New(opts...)
	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *DubProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewLinkResource,
		NewTagResource,
	}
}

func (p *DubProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewLinkDataSource,
		NewTagDataSource,
	}
}

func (p *DubProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &DubProvider{
			version: version,
		}
	}
}
